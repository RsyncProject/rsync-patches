This patch makes the xattr functions skip devices and special files,
because OS X returns the wrong errno when getting/setting xattrs on
them (it returns EPERM instead of ENOTSUP).

To use this patch, run these commands for a successful build:

    patch -p1 <patches/osx-xattr-nodev.diff
    ./configure                         (optional if already run)
    make

based-on: 54f00c3f89fc147f2f9cba89d26a5bb1d20e783b
diff --git a/flist.c b/flist.c
--- a/flist.c
+++ b/flist.c
@@ -1427,6 +1427,7 @@ static struct file_struct *send_file_name(int f, struct file_list *flist,
 #endif
 #ifdef SUPPORT_XATTRS
 		if (preserve_xattrs) {
+			sx.st.st_mode = file->mode;
 			sx.xattr = NULL;
 			if (get_xattr(fname, &sx) < 0) {
 				io_error |= IOERR_GENERAL;
diff --git a/xattrs.c b/xattrs.c
--- a/xattrs.c
+++ b/xattrs.c
@@ -283,6 +283,10 @@ int get_xattr(const char *fname, stat_x *sxp)
 {
 	sxp->xattr = new(item_list);
 	*sxp->xattr = empty_xattr;
+
+	if (IS_SPECIAL(sxp->st.st_mode) || IS_DEVICE(sxp->st.st_mode))
+		return 0;
+
 	if (rsync_xal_get(fname, sxp->xattr) < 0) {
 		free_xattr(sxp);
 		return -1;
@@ -883,6 +887,11 @@ int set_xattr(const char *fname, const struct file_struct *file,
 		return -1;
 	}
 
+	if (IS_SPECIAL(sxp->st.st_mode) || IS_DEVICE(sxp->st.st_mode)) {
+		errno = ENOTSUP;
+		return -1;
+	}
+
 	ndx = F_XATTR(file);
 	return rsync_xal_set(fname, lst + ndx, fnamecmp, sxp);
 }
