This patch causes the --cvs-exclude option to prefix the names listed
in each dir's CVS/Entries file as per-dir includes before the dir's list
of excludes taken from the .cvsignore file.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/cvs-entries.diff
    ./configure                                 (optional if already run)
    make

--- old/exclude.c
+++ new/exclude.c
@@ -216,6 +216,8 @@ static void add_rule(struct filter_list_
 		if (!(lp = new_array(struct filter_list_struct, 1)))
 			out_of_memory("add_rule");
 		lp->head = lp->tail = NULL;
+		if (mflags & MATCHFLG_CVS_IGNORE)
+			cp = "CVS";
 		if (asprintf(&lp->debug_type, " [per-dir %s]", cp) < 0)
 			out_of_memory("add_rule");
 		ret->u.mergelist = lp;
@@ -448,6 +450,14 @@ void *push_local_filters(const char *dir
 				set_filter_dir(dir, dirlen);
 		}
 
+		if (ex->match_flags & MATCHFLG_CVS_IGNORE
+		    && strlcpy(dirbuf + dirbuf_len, "CVS/Entries",
+			MAXPATHLEN - dirbuf_len) < MAXPATHLEN - dirbuf_len) {
+		    /* Start by adding include rules for all the names in CVS/Entries. */
+		    parse_filter_file(lp, dirbuf,
+				      MATCHFLG_NO_PREFIXES | MATCHFLG_INCLUDE,
+				      XFLG_CVS_ENTRIES);
+		}
 		if (strlcpy(dirbuf + dirbuf_len, ex->pattern,
 		    MAXPATHLEN - dirbuf_len) < MAXPATHLEN - dirbuf_len) {
 			parse_filter_file(lp, dirbuf, ex->match_flags,
@@ -973,6 +983,7 @@ void parse_filter_file(struct filter_lis
 	char line[BIGPATHBUFLEN];
 	char *eob = line + sizeof line - 1;
 	int word_split = mflags & MATCHFLG_WORD_SPLIT;
+	int slash_parse = xflags & XFLG_CVS_ENTRIES ? 1 : 0;
 
 	if (!fname || !*fname)
 		return;
@@ -1019,6 +1030,24 @@ void parse_filter_file(struct filter_lis
 				}
 				break;
 			}
+			switch (slash_parse) { /* CVS/Entries parsing: */
+			case 1: /* Ignore starting chars until first slash. */
+				if (ch == '/')
+					slash_parse = 2;
+				continue;
+			case 2: /* Name ends at 2nd slash on the line. */
+				if (ch == '/') {
+					slash_parse = 3;
+					continue;
+				}
+				break;
+			case 3: /* Ignore trailing chars until EOL. */
+				if (ch == '\n' || ch == '\r') {
+					slash_parse = 1;
+					goto end_the_line;
+				}
+				continue;
+			}
 			if (word_split && isspace(ch))
 				break;
 			if (eol_nulls? !ch : (ch == '\n' || ch == '\r'))
@@ -1028,13 +1057,15 @@ void parse_filter_file(struct filter_lis
 			else
 				overflow = 1;
 		}
+	  end_the_line:
 		if (overflow) {
 			rprintf(FERROR, "discarding over-long filter: %s...\n", line);
 			s = line;
 		}
 		*s = '\0';
 		/* Skip an empty token and (when line parsing) comments. */
-		if (*line && (word_split || (*line != ';' && *line != '#')))
+		if (*line && (word_split || slash_parse
+			   || (*line != ';' && *line != '#')))
 			parse_rule(listp, line, mflags, xflags);
 		if (ch == EOF)
 			break;
--- old/rsync.h
+++ new/rsync.h
@@ -117,6 +117,7 @@
 #define XFLG_OLD_PREFIXES	(1<<1)
 #define XFLG_ANCHORED2ABS	(1<<2)
 #define XFLG_ABS_IF_SLASH	(1<<3)
+#define XFLG_CVS_ENTRIES	(1<<4)
 
 #define ATTRS_REPORT		(1<<0)
 #define ATTRS_SKIP_MTIME	(1<<1)
--- old/testsuite/exclude.test
+++ new/testsuite/exclude.test
@@ -19,6 +19,7 @@ export CVSIGNORE
 
 makepath "$fromdir/foo/down/to/you"
 makepath "$fromdir/foo/sub"
+makepath "$fromdir/bar/down/to/CVS"
 makepath "$fromdir/bar/down/to/foo/too"
 makepath "$fromdir/bar/down/to/bar/baz"
 makepath "$fromdir/mid/for/foo/and/that/is/who"
@@ -57,6 +58,9 @@ echo cvsout >"$fromdir/bar/down/to/foo/f
 echo gone >"$fromdir/bar/down/to/foo/file3"
 echo lost >"$fromdir/bar/down/to/foo/file4"
 echo weird >"$fromdir/bar/down/to/foo/+ file3"
+echo cvsin >"$fromdir/bar/down/to/not.junk"
+echo cvsout >"$fromdir/bar/down/to/not.good"
+echo cvsout >"$fromdir/bar/down/to/D"
 echo cvsout-but-filtin >"$fromdir/bar/down/to/foo/file4.junk"
 echo smashed >"$fromdir/bar/down/to/foo/to"
 cat >"$fromdir/bar/down/to/bar/.filt2" <<EOF
@@ -103,7 +107,18 @@ cat >"$excl" <<EOF
 EOF
 
 cat >"$scratchdir/.cvsignore" <<EOF
-home-cvs-exclude
+home-cvs-exclude D
+EOF
+cat >"$fromdir/bar/down/to/CVS/Entries" <<EOF
+/not.junk/1.1/Mon Jan  1 11:11:11 2001//
+filt2
+/another.file/1.1/Tue Jan  1 22:22:22 2002//
+invalid lines should just be ignored...
+D/directory////
+D
+EOF
+cat >"$fromdir/bar/down/to/.cvsignore" <<EOF
+not.good
 EOF
 
 # Create the chk dir with what we expect to be excluded
@@ -132,6 +147,10 @@ checkit "$RSYNC -avv --exclude-from=\"$e
 # Modify the chk dir by removing cvs-ignored files and then tweaking the dir times.
 
 rm "$chkdir"/foo/*.old
+rm "$chkdir"/bar/down/to/D
+rm "$chkdir"/bar/down/to/CVS/Entries
+rmdir "$chkdir"/bar/down/to/CVS
+rm "$chkdir"/bar/down/to/not.good
 rm "$chkdir"/bar/down/to/foo/*.bak
 rm "$chkdir"/bar/down/to/foo/*.junk
 rm "$chkdir"/bar/down/to/home-cvs-exclude
@@ -147,8 +166,12 @@ checkit "$RSYNC -avvC --filter=\"merge $
 
 # Modify the chk dir for our merge-exclude test and then tweak the dir times.
 
+makepath "$chkdir/bar/down/to/CVS"
 rm "$chkdir"/foo/file1
 rm "$chkdir"/bar/down/to/bar/baz/*.deep
+cp -p "$fromdir"/bar/down/to/D "$chkdir"/bar/down/to/D
+cp -p "$fromdir"/bar/down/to/not.good "$chkdir"/bar/down/to/not.good
+cp -p "$fromdir"/bar/down/to/CVS/Entries "$chkdir"/bar/down/to/CVS/Entries
 cp -p "$fromdir"/bar/down/to/foo/*.junk "$chkdir"/bar/down/to/foo
 cp -p "$fromdir"/bar/down/to/foo/to "$chkdir"/bar/down/to/foo
 
