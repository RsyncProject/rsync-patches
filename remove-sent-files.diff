After applying this patch and running configure, you MUST run this
command before "make":

    make proto


--- orig/io.c	2005-02-03 02:04:20
+++ io.c	2005-01-10 10:49:17
@@ -244,6 +244,14 @@ static void read_msg_fd(void)
 		read_loop(fd, buf, 4);
 		redo_list_add(IVAL(buf,0));
 		break;
+	case MSG_SUCCESS:
+		if (len != 4) {
+			rprintf(FERROR, "invalid message %d:%d\n", tag, len);
+			exit_cleanup(RERR_STREAMIO);
+		}
+		read_loop(fd, buf, len);
+		io_multiplex_write(MSG_SUCCESS, buf, len);
+		break;
 	case MSG_INFO:
 	case MSG_ERROR:
 	case MSG_LOG:
@@ -677,6 +685,16 @@ static int readfd_unbuffered(int fd, cha
 			read_loop(fd, iobuf_in, remaining);
 			iobuf_in_ndx = 0;
 			break;
+		case MSG_SUCCESS:
+			if (remaining != 4) {
+				rprintf(FERROR, "invalid multi-message %d:%ld\n",
+					tag, (long)remaining);
+				exit_cleanup(RERR_STREAMIO);
+			}
+			read_loop(fd, line, remaining);
+			successful_send(IVAL(line, 0));
+			remaining = 0;
+			break;
 		case MSG_INFO:
 		case MSG_ERROR:
 			if (remaining >= sizeof line) {
--- orig/main.c	2005-02-04 22:28:09
+++ main.c	2005-02-05 01:24:16
@@ -32,12 +32,14 @@ extern int am_daemon;
 extern int verbose;
 extern int blocking_io;
 extern int delete_before;
+extern int delete_sent_files;
 extern int daemon_over_rsh;
 extern int do_stats;
 extern int dry_run;
 extern int list_only;
 extern int log_got_error;
 extern int module_id;
+extern int need_messages_from_generator;
 extern int orig_umask;
 extern int copy_links;
 extern int keep_dirlinks;
@@ -440,6 +442,12 @@ static void do_server_sender(int f_in, i
 		exit_cleanup(RERR_SYNTAX);
 		return;
 	}
+	if (am_daemon && lp_read_only(module_id) && delete_sent_files) {
+		rprintf(FERROR,
+		    "ERROR: --delete-sent-files cannot be used with a read-only module\n");
+		exit_cleanup(RERR_SYNTAX);
+		return;
+	}
 
 	if (!relative_paths && !push_dir(dir)) {
 		rsyserr(FERROR, errno, "push_dir#3 %s failed",
@@ -670,6 +678,8 @@ void start_server(int f_in, int f_out, i
 
 	if (am_sender) {
 		keep_dirlinks = 0; /* Must be disabled on the sender. */
+		if (need_messages_from_generator)
+			io_start_multiplex_in();
 
 		recv_filter_list(f_in);
 		do_server_sender(f_in, f_out, argc, argv);
@@ -747,6 +757,9 @@ int client_run(int f_in, int f_out, pid_
 		exit_cleanup(status);
 	}
 
+	if (need_messages_from_generator && !read_batch)
+		io_start_multiplex_out();
+
 	if (argc == 0)
 		list_only |= 1;
 
--- orig/options.c	2005-02-04 22:28:09
+++ options.c	2005-01-23 07:30:51
@@ -59,6 +59,7 @@ int delete_during = 0;
 int delete_before = 0;
 int delete_after = 0;
 int delete_excluded = 0;
+int delete_sent_files = 0;
 int one_file_system = 0;
 int protocol_version = PROTOCOL_VERSION;
 int sparse_files = 0;
@@ -92,6 +93,7 @@ int bwlimit = 0;
 size_t bwlimit_writemax = 0;
 int only_existing = 0;
 int opt_ignore_existing = 0;
+int need_messages_from_generator = 0;
 int max_delete = 0;
 OFF_T max_size = 0;
 int ignore_errors = 0;
@@ -286,6 +288,7 @@ void usage(enum logcode F)
   rprintf(F,"     --delete-during         receiver deletes during transfer, not before\n");
   rprintf(F,"     --delete-after          receiver deletes after transfer, not before\n");
   rprintf(F,"     --delete-excluded       also delete excluded files on the receiving side\n");
+  rprintf(F,"     --delete-sent-files     updated/sent files are removed from sending side\n");
   rprintf(F,"     --ignore-errors         delete even if there are I/O errors\n");
   rprintf(F,"     --force                 force deletion of directories even if not empty\n");
   rprintf(F,"     --max-delete=NUM        don't delete more than NUM files\n");
@@ -360,6 +363,7 @@ static struct poptOption long_options[] 
   {"delete-during",    0,  POPT_ARG_NONE,   &delete_during, 0, 0, 0 },
   {"delete-after",     0,  POPT_ARG_NONE,   &delete_after, 0, 0, 0 },
   {"delete-excluded",  0,  POPT_ARG_NONE,   &delete_excluded, 0, 0, 0 },
+  {"delete-sent-files",0,  POPT_ARG_NONE,   &delete_sent_files, 0, 0, 0 },
   {"force",            0,  POPT_ARG_NONE,   &force_delete, 0, 0, 0 },
   {"numeric-ids",      0,  POPT_ARG_NONE,   &numeric_ids, 0, 0, 0 },
   {"filter",          'f', POPT_ARG_STRING, 0, OPT_FILTER, 0, 0 },
@@ -922,6 +926,9 @@ int parse_arguments(int *argc, const cha
 	else if (delete_mode || delete_excluded)
 		delete_mode = delete_before = 1;
 
+	if (delete_sent_files)
+		need_messages_from_generator = 1;
+
 	*argv = poptGetArgs(pc);
 	*argc = count_args(*argv);
 
@@ -1318,6 +1325,9 @@ void server_options(char **args,int *arg
 	if (!implied_dirs && !am_sender)
 		args[ac++] = "--no-implied-dirs";
 
+	if (delete_sent_files)
+		args[ac++] = "--delete-sent-files";
+
 	*argc = ac;
 	return;
 
--- orig/receiver.c	2005-02-03 02:04:20
+++ receiver.c	2004-08-13 08:38:51
@@ -41,6 +41,7 @@ extern int basis_dir_cnt;
 extern int make_backups;
 extern int do_progress;
 extern int cleanup_got_literal;
+extern int delete_sent_files;
 extern int module_id;
 extern int ignore_errors;
 extern int orig_umask;
@@ -275,7 +276,7 @@ int recv_files(int f_in, struct file_lis
 	char *fname, fbuf[MAXPATHLEN];
 	char template[MAXPATHLEN];
 	char fnametmp[MAXPATHLEN];
-	char *fnamecmp, *partialptr;
+	char *fnamecmp, *partialptr, numbuf[4];
 	char fnamecmpbuf[MAXPATHLEN];
 	uchar *delayed_bits = NULL;
 	struct file_struct *file;
@@ -532,7 +533,12 @@ int recv_files(int f_in, struct file_lis
 
 		cleanup_disable();
 
-		if (!recv_ok) {
+		if (recv_ok) {
+			if (delete_sent_files) {
+				SIVAL(numbuf, 0, i);
+				send_msg(MSG_SUCCESS, numbuf, 4);
+			}
+		} else {
 			int msgtype = csum_length == SUM_LENGTH || read_batch ?
 				FERROR : FINFO;
 			if (msgtype == FERROR || verbose) {
@@ -556,9 +562,8 @@ int recv_files(int f_in, struct file_lis
 					keptstr, redostr);
 			}
 			if (csum_length != SUM_LENGTH) {
-				char buf[4];
-				SIVAL(buf, 0, i);
-				send_msg(MSG_REDO, buf, 4);
+				SIVAL(numbuf, 0, i);
+				send_msg(MSG_REDO, numbuf, 4);
 			}
 		}
 	}
--- orig/rsync.h	2005-02-04 22:28:09
+++ rsync.h	2005-02-03 02:04:59
@@ -61,6 +61,7 @@
 #define FLAG_HLINK_EOL (1<<1)	/* generator only */
 #define FLAG_MOUNT_POINT (1<<2)	/* sender only */
 #define FLAG_DEL_HERE (1<<3)	/* receiver/generator */
+#define FLAG_SENT (1<<7)	/* sender only */
 
 /* update this if you make incompatible changes */
 #define PROTOCOL_VERSION 29
@@ -142,6 +143,7 @@ enum logcode { FERROR=1, FINFO=2, FLOG=3
 /* Messages types that are sent over the message channel.  The logcode
  * values must all be present here with identical numbers. */
 enum msgcode {
+	MSG_SUCCESS=6,	/* successfully updated indicated flist index */
 	MSG_DONE=5,	/* current phase is done */
 	MSG_REDO=4,	/* reprocess indicated flist index */
 	MSG_ERROR=FERROR, MSG_INFO=FINFO, MSG_LOG=FLOG, /* remote logging */
--- orig/rsync.yo	2005-02-05 01:23:49
+++ rsync.yo	2005-02-03 02:05:29
@@ -338,6 +338,7 @@ to the detailed description below for a 
      --delete-during         receiver deletes during xfer, not before
      --delete-after          receiver deletes after transfer, not before
      --delete-excluded       also delete excluded files on receiver
+     --delete-sent-files     updated/sent files are removed from sender
      --ignore-errors         delete even if there are I/O errors
      --force                 force deletion of dirs even if not empty
      --max-delete=NUM        don't delete more than NUM files
@@ -727,6 +728,11 @@ receiving side that are not on the sendi
 delete any files on the receiving side that are excluded (see bf(--exclude)).
 See bf(--delete) (which is implied) for more details on file-deletion.
 
+dit(bf(--delete-sent-files)) This tells rsync to remove the source files
+on the sending side that are successfully transferred to the receiving
+side.  Directories are not removed, nor are files that are identical on
+both systems.
+
 dit(bf(--ignore-errors)) Tells bf(--delete) to go ahead and delete files
 even when there are I/O errors.
 
--- orig/sender.c	2005-02-03 02:04:20
+++ sender.c	2004-07-26 16:49:19
@@ -26,6 +26,7 @@ extern int io_error;
 extern int dry_run;
 extern int am_server;
 extern int am_daemon;
+extern int delete_sent_files;
 extern int protocol_version;
 extern int updating_basis_file;
 extern int make_backups;
@@ -94,7 +95,29 @@ static struct sum_struct *receive_sums(i
 	return s;
 }
 
+static struct file_list *the_flist;
 
+void successful_send(int i)
+{
+	char fname[MAXPATHLEN];
+	struct file_struct *file;
+	unsigned int offset;
+
+	if (!the_flist || i < 0 || i >= the_flist->count)
+		return;
+
+	file = the_flist->files[i];
+	if (!(file->flags & FLAG_SENT))
+		return; /* We didn't send it -- impossible! */
+	if (file->basedir) {
+		offset = stringjoin(fname, sizeof fname,
+				    file->basedir, "/", NULL);
+	} else
+		offset = 0;
+	f_name_to(file, fname + offset);
+	if (delete_sent_files && do_unlink(fname) == 0 && verbose > 0)
+		rprintf(FINFO, "sender removed %s\n", fname + offset);
+}
 
 void send_files(struct file_list *flist, int f_out, int f_in)
 {
@@ -113,6 +136,8 @@ void send_files(struct file_list *flist,
 	if (verbose > 2)
 		rprintf(FINFO, "send_files starting\n");
 
+	the_flist = flist;
+
 	while (1) {
 		unsigned int offset;
 
@@ -254,6 +279,9 @@ void send_files(struct file_list *flist,
 			rprintf(FINFO, "sender finished %s\n",
 				safe_fname(fname));
 		}
+
+		/* Flag that we actually sent this entry. */
+		file->flags |= FLAG_SENT;
 	}
 	make_backups = save_make_backups;
 
