--- orig/generator.c	2005-09-29 18:03:00
+++ generator.c	2005-09-29 18:09:27
@@ -60,6 +60,7 @@ extern int make_backups;
 extern int csum_length;
 extern int ignore_times;
 extern int size_only;
+extern OFF_T min_size;
 extern OFF_T max_size;
 extern int io_error;
 extern int allowed_lull;
@@ -863,6 +864,15 @@ static void recv_generator(char *fname, 
 		return;
 	}
 
+	if (min_size && file->length < min_size) {
+		if (verbose > 1) {
+			if (the_file_list->count == 1)
+				fname = f_name(file);
+			rprintf(FINFO, "%s is under min-size\n",
+				safe_fname(fname));
+		}
+		return;
+	}
 	if (max_size && file->length > max_size) {
 		if (verbose > 1) {
 			if (the_file_list->count == 1)
@@ -1265,7 +1275,7 @@ void generate_files(int f_out, struct fi
 
 	phase++;
 	csum_length = SUM_LENGTH;
-	max_size = ignore_existing = ignore_non_existing = 0;
+	min_size = max_size = ignore_existing = ignore_non_existing = 0;
 	update_only = always_checksum = size_only = 0;
 	ignore_times = 1;
 	if (append_mode)  /* resend w/o append mode */
--- orig/options.c	2005-09-29 18:06:38
+++ options.c	2005-09-29 18:09:56
@@ -98,6 +98,7 @@ int ignore_existing = 0;
 int ignore_non_existing = 0;
 int need_messages_from_generator = 0;
 int max_delete = 0;
+OFF_T min_size = 0;
 OFF_T max_size = 0;
 int ignore_errors = 0;
 int modify_window = 0;
@@ -167,7 +168,7 @@ static int itemize_changes = 0;
 static int refused_delete, refused_archive_part;
 static int refused_partial, refused_progress, refused_delete_before;
 static int refused_inplace;
-static char *max_size_arg;
+static char *min_size_arg, *max_size_arg;
 static char partialdir_for_delayupdate[] = ".~tmp~";
 
 /** Local address to bind.  As a character string because it's
@@ -307,6 +308,7 @@ void usage(enum logcode F)
   rprintf(F,"     --ignore-errors         delete even if there are I/O errors\n");
   rprintf(F,"     --force                 force deletion of directories even if not empty\n");
   rprintf(F,"     --max-delete=NUM        don't delete more than NUM files\n");
+  rprintf(F,"     --min-size=SIZE         don't transfer any file smaller than SIZE\n");
   rprintf(F,"     --max-size=SIZE         don't transfer any file larger than SIZE\n");
   rprintf(F,"     --partial               keep partially transferred files\n");
   rprintf(F,"     --partial-dir=DIR       put a partially transferred file into DIR\n");
@@ -361,7 +363,7 @@ void usage(enum logcode F)
 
 enum {OPT_VERSION = 1000, OPT_DAEMON, OPT_SENDER, OPT_EXCLUDE, OPT_EXCLUDE_FROM,
       OPT_FILTER, OPT_COMPARE_DEST, OPT_COPY_DEST, OPT_LINK_DEST,
-      OPT_INCLUDE, OPT_INCLUDE_FROM, OPT_MODIFY_WINDOW,
+      OPT_INCLUDE, OPT_INCLUDE_FROM, OPT_MODIFY_WINDOW, OPT_MIN_SIZE,
       OPT_READ_BATCH, OPT_WRITE_BATCH, OPT_ONLY_WRITE_BATCH, OPT_MAX_SIZE,
       OPT_REFUSED_BASE = 9000};
 
@@ -418,6 +420,7 @@ static struct poptOption long_options[] 
   {"existing",         0,  POPT_ARG_NONE,   &ignore_non_existing, 0, 0, 0 },
   {"ignore-existing",  0,  POPT_ARG_NONE,   &ignore_existing, 0, 0, 0 },
   {"ignore-non-existing",0,POPT_ARG_NONE,   &ignore_non_existing, 0, 0, 0 },
+  {"min-size",         0,  POPT_ARG_STRING, &min_size_arg, OPT_MIN_SIZE, 0, 0 },
   {"max-size",         0,  POPT_ARG_STRING, &max_size_arg,  OPT_MAX_SIZE, 0, 0 },
   {"sparse",          'S', POPT_ARG_NONE,   &sparse_files, 0, 0, 0 },
   {"inplace",          0,  POPT_ARG_NONE,   &inplace, 0, 0, 0 },
@@ -886,6 +889,15 @@ int parse_arguments(int *argc, const cha
 			read_batch = 1;
 			break;
 
+		case OPT_MIN_SIZE:
+			if ((min_size = parse_size_arg(min_size_arg)) <= 0) {
+				snprintf(err_buf, sizeof err_buf,
+					"--min-size value is invalid: %s\n",
+					min_size_arg);
+				return 0;
+			}
+			break;
+
 		case OPT_MAX_SIZE:
 			if ((max_size = parse_size_arg(max_size_arg)) <= 0) {
 				snprintf(err_buf, sizeof err_buf,
@@ -1415,6 +1427,11 @@ void server_options(char **args,int *arg
 		args[ac++] = arg;
 	}
 
+	if (min_size && am_sender) {
+		args[ac++] = "--min-size";
+		args[ac++] = min_size_arg;
+	}
+
 	if (max_size && am_sender) {
 		args[ac++] = "--max-size";
 		args[ac++] = max_size_arg;
--- orig/rsync.yo	2005-09-29 17:02:16
+++ rsync.yo	2005-05-06 19:12:35
@@ -340,6 +340,7 @@ to the detailed description below for a 
      --ignore-errors         delete even if there are I/O errors
      --force                 force deletion of dirs even if not empty
      --max-delete=NUM        don't delete more than NUM files
+     --min-size=SIZE         don't transfer any file smaller than SIZE
      --max-size=SIZE         don't transfer any file larger than SIZE
      --partial               keep partially transferred files
      --partial-dir=DIR       put a partially transferred file into DIR
@@ -797,10 +798,16 @@ dit(bf(--max-delete=NUM)) This tells rsy
 files or directories (NUM must be non-zero).
 This is useful when mirroring very large trees to prevent disasters.
 
+dit(bf(--min-size=SIZE)) This tells rsync to avoid transferring any
+file that is smaller than the specified SIZE, which can help in not
+transferring small, junk files.
+
+The SIZE value can be suffixed with a letter to indicate a size multiplier
+(K, M, or G) and may be a fractional value (e.g. "bf(--min-size=2.5k)").
+
 dit(bf(--max-size=SIZE)) This tells rsync to avoid transferring any
-file that is larger than the specified SIZE. The SIZE value can be
-suffixed with a letter to indicate a size multiplier (K, M, or G) and
-may be a fractional value (e.g. "bf(--max-size=1.5m)").
+file that is larger than the specified SIZE. See the bf(--min-size)
+option for a description of SIZE.
 
 dit(bf(-B, --block-size=BLOCKSIZE)) This forces the block size used in
 the rsync algorithm to a fixed value.  It is normally selected based on
