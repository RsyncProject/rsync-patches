To use this patch, run these commands for a successful build:

    patch -p1 <patches/atimes.diff
    ./prepare-source
    ./configure                      (optional if already run)
    make


--- old/flist.c
+++ new/flist.c
@@ -46,6 +46,7 @@ extern int preserve_devices;
 extern int preserve_specials;
 extern int preserve_uid;
 extern int preserve_gid;
+extern int preserve_atimes;
 extern int relative_paths;
 extern int implied_dirs;
 extern int ignore_perishable;
@@ -127,6 +128,7 @@ void show_flist_stats(void)
 static void list_file_entry(struct file_struct *f)
 {
 	char permbuf[PERMSTRING_SIZE];
+	time_t atime = preserve_atimes ? IVAL(ATIME_PTR(f), 0) : 0;
 
 	if (!f->basename) {
 		/* this can happen if duplicate names were removed */
@@ -137,16 +139,18 @@ static void list_file_entry(struct file_
 
 #ifdef SUPPORT_LINKS
 	if (preserve_links && S_ISLNK(f->mode)) {
-		rprintf(FINFO, "%s %11.0f %s %s -> %s\n",
+		rprintf(FINFO, "%s %11.0f %s %s %s -> %s\n",
 			permbuf,
 			(double)f->length, timestring(f->modtime),
+			preserve_atimes ? timestring(atime) : "",
 			f_name(f, NULL), f->u.link);
 	} else
 #endif
 	{
-		rprintf(FINFO, "%s %11.0f %s %s\n",
+		rprintf(FINFO, "%s %11.0f %s %s %s\n",
 			permbuf,
 			(double)f->length, timestring(f->modtime),
+			preserve_atimes ? timestring(atime) : "",
 			f_name(f, NULL));
 	}
 }
@@ -304,6 +308,7 @@ static void send_file_entry(struct file_
 {
 	unsigned short flags;
 	static time_t modtime;
+	static time_t atime;
 	static mode_t mode;
 	static int64 dev;
 	static dev_t rdev;
@@ -319,7 +324,7 @@ static void send_file_entry(struct file_
 
 	if (!file) {
 		write_byte(f, 0);
-		modtime = 0, mode = 0;
+		modtime = 0, atime = 0, mode = 0;
 		dev = 0, rdev = MAKEDEV(0, 0);
 		rdev_major = 0;
 		uid = 0, gid = 0;
@@ -365,6 +370,13 @@ static void send_file_entry(struct file_
 		flags |= XMIT_SAME_TIME;
 	else
 		modtime = file->modtime;
+	if (preserve_atimes && !S_ISDIR(mode)) {
+		time_t file_atime = IVAL(ATIME_PTR(file), 0);
+		if (file_atime == atime)
+			flags |= XMIT_SAME_ATIME;
+		else
+			atime = file_atime;
+	}
 
 #ifdef SUPPORT_HARD_LINKS
 	if (file->link_u.idev) {
@@ -418,6 +430,8 @@ static void send_file_entry(struct file_
 		write_int(f, modtime);
 	if (!(flags & XMIT_SAME_MODE))
 		write_int(f, to_wire_mode(mode));
+	if (preserve_atimes && !S_ISDIR(mode) && !(flags & XMIT_SAME_ATIME))
+		write_int(f, atime);
 	if (preserve_uid && !(flags & XMIT_SAME_UID)) {
 		if (!numeric_ids)
 			add_uid(uid);
@@ -484,6 +498,7 @@ static struct file_struct *receive_file_
 					      unsigned short flags, int f)
 {
 	static time_t modtime;
+	static time_t atime;
 	static mode_t mode;
 	static int64 dev;
 	static dev_t rdev;
@@ -497,12 +512,13 @@ static struct file_struct *receive_file_
 	char thisname[MAXPATHLEN];
 	unsigned int l1 = 0, l2 = 0;
 	int alloc_len, basename_len, dirname_len, linkname_len, sum_len;
+	int atime_len;
 	OFF_T file_length;
 	char *basename, *dirname, *bp;
 	struct file_struct *file;
 
 	if (!flist) {
-		modtime = 0, mode = 0;
+		modtime = 0, atime = 0, mode = 0;
 		dev = 0, rdev = MAKEDEV(0, 0);
 		rdev_major = 0;
 		uid = 0, gid = 0;
@@ -558,6 +574,8 @@ static struct file_struct *receive_file_
 		modtime = (time_t)read_int(f);
 	if (!(flags & XMIT_SAME_MODE))
 		mode = from_wire_mode(read_int(f));
+	if (preserve_atimes && !S_ISDIR(mode) && !(flags & XMIT_SAME_ATIME))
+		atime = (time_t)read_int(f);
 
 	if (chmod_modes && !S_ISLNK(mode))
 		mode = tweak_mode(mode, chmod_modes);
@@ -600,19 +618,23 @@ static struct file_struct *receive_file_
 
 	sum_len = always_checksum && S_ISREG(mode) ? MD4_SUM_LENGTH : 0;
 
+	atime_len = preserve_atimes ? 4 : 0;
+
 	alloc_len = file_struct_len + dirname_len + basename_len
-		  + linkname_len + sum_len;
+		  + atime_len + linkname_len + sum_len;
 	bp = pool_alloc(flist->file_pool, alloc_len, "receive_file_entry");
 
 	file = (struct file_struct *)bp;
 	memset(bp, 0, file_struct_len);
-	bp += file_struct_len;
+	bp += file_struct_len + atime_len;
 
 	file->modtime = modtime;
 	file->length = file_length;
 	file->mode = mode;
 	file->uid = uid;
 	file->gid = gid;
+	if (preserve_atimes)
+		SIVAL(ATIME_PTR(file), 0, atime);
 
 	if (dirname_len) {
 		file->dirname = lastdir = bp;
@@ -731,6 +753,7 @@ struct file_struct *make_file(char *fnam
 	char thisname[MAXPATHLEN];
 	char linkname[MAXPATHLEN];
 	int alloc_len, basename_len, dirname_len, linkname_len, sum_len;
+	int atime_len;
 	char *basename, *dirname, *bp;
 
 	if (!flist || !flist->count)	/* Ignore lastdir when invalid. */
@@ -854,8 +877,10 @@ struct file_struct *make_file(char *fnam
 	sum_len = always_checksum && am_sender && S_ISREG(st.st_mode)
 	        ? MD4_SUM_LENGTH : 0;
 
+	atime_len = preserve_atimes ? 4 : 0;
+
 	alloc_len = file_struct_len + dirname_len + basename_len
-		  + linkname_len + sum_len;
+		  + atime_len + linkname_len + sum_len;
 	if (flist)
 		bp = pool_alloc(flist->file_pool, alloc_len, "make_file");
 	else {
@@ -865,7 +890,7 @@ struct file_struct *make_file(char *fnam
 
 	file = (struct file_struct *)bp;
 	memset(bp, 0, file_struct_len);
-	bp += file_struct_len;
+	bp += file_struct_len + atime_len;
 
 	file->flags = flags;
 	file->modtime = st.st_mtime;
@@ -873,6 +898,8 @@ struct file_struct *make_file(char *fnam
 	file->mode = st.st_mode;
 	file->uid = st.st_uid;
 	file->gid = st.st_gid;
+	if (preserve_atimes)
+		SIVAL(ATIME_PTR(file), 0, st.st_atime);
 
 #ifdef SUPPORT_HARD_LINKS
 	if (flist && flist->hlink_pool) {
@@ -1594,8 +1621,9 @@ static void clean_flist(struct file_list
 			}
 			/* Make sure we don't lose track of a user-specified
 			 * top directory. */
-			flist->files[keep]->flags |= flist->files[drop]->flags
-						   & (FLAG_TOP_DIR|FLAG_DEL_HERE);
+			flist->files[keep]->flags
+			    |= flist->files[drop]->flags
+			     & (FLAG_TOP_DIR|FLAG_DEL_HERE);
 
 			clear_file(flist->files[drop], flist);
 
--- old/generator.c
+++ new/generator.c
@@ -43,6 +43,7 @@ extern int preserve_perms;
 extern int preserve_uid;
 extern int preserve_gid;
 extern int preserve_times;
+extern int preserve_atimes;
 extern int omit_dir_times;
 extern int delete_mode;
 extern int delete_before;
@@ -90,6 +91,7 @@ extern dev_t filesystem_dev;
 extern char *backup_dir;
 extern char *backup_suffix;
 extern int backup_suffix_len;
+extern unsigned int file_struct_len;
 extern struct file_list *the_file_list;
 extern struct filter_list_struct server_filter_list;
 
@@ -409,6 +411,9 @@ void itemize(struct file_struct *file, i
 		  && (!(iflags & ITEM_XNAME_FOLLOWS) || *xname))
 		 || (keep_time && cmp_time(file->modtime, st->st_mtime) != 0))
 			iflags |= ITEM_REPORT_TIME;
+		if (preserve_atimes && !S_ISDIR(file->mode) && !S_ISLNK(file->mode)
+		 && cmp_time(IVAL(ATIME_PTR(file), 0), st->st_atime) != 0)
+			iflags |= ITEM_REPORT_ATIME;
 		if ((file->mode & CHMOD_BITS) != (st->st_mode & CHMOD_BITS))
 			iflags |= ITEM_REPORT_PERMS;
 		if (preserve_uid && am_root && file->uid != st->st_uid)
@@ -720,6 +725,8 @@ static int try_dests_reg(struct file_str
 			if (hard_link_one(file, ndx, fname, 0, stp,
 					  cmpbuf, 1, i, code) < 0)
 				goto try_a_copy;
+			if (preserve_atimes)
+				set_file_attrs(fname, file, stp, 0);
 			if (preserve_hard_links && file->link_u.links) {
 				if (dry_run)
 					file->link_u.links->link_dest_used = j + 1;
--- old/log.c
+++ new/log.c
@@ -37,6 +37,7 @@ extern int msg_fd_out;
 extern int allow_8bit_chars;
 extern int protocol_version;
 extern int preserve_times;
+extern int preserve_atimes;
 extern int stdout_format_has_i;
 extern int stdout_format_has_o_or_i;
 extern int logfile_format_has_i;
@@ -611,7 +612,8 @@ static void log_formatted(enum logcode c
 			c[5] = !(iflags & ITEM_REPORT_PERMS) ? '.' : 'p';
 			c[6] = !(iflags & ITEM_REPORT_OWNER) ? '.' : 'o';
 			c[7] = !(iflags & ITEM_REPORT_GROUP) ? '.' : 'g';
-			c[8] = '.';
+			c[8] = !(iflags & ITEM_REPORT_ATIME) ? '.'
+			     : S_ISLNK(file->mode) ? 'U' : 'u';
 			c[9] = '\0';
 
 			if (iflags & (ITEM_IS_NEW|ITEM_MISSING_DATA)) {
--- old/options.c
+++ new/options.c
@@ -55,6 +55,7 @@ int preserve_uid = 0;
 int preserve_gid = 0;
 int preserve_times = 0;
 int omit_dir_times = 0;
+int preserve_atimes = 0;
 int update_only = 0;
 int cvs_exclude = 0;
 int dry_run = 0;
@@ -311,8 +312,9 @@ void usage(enum logcode F)
   rprintf(F,"     --devices               preserve device files (super-user only)\n");
   rprintf(F,"     --specials              preserve special files\n");
   rprintf(F," -D                          same as --devices --specials\n");
-  rprintf(F," -t, --times                 preserve times\n");
-  rprintf(F," -O, --omit-dir-times        omit directories when preserving times\n");
+  rprintf(F," -t, --times                 preserve modify times\n");
+  rprintf(F," -O, --omit-dir-times        omit directories when preserving modify times\n");
+  rprintf(F," -U, --atimes                preserve access (use) times\n");
   rprintf(F,"     --super                 receiver attempts super-user activities\n");
   rprintf(F," -S, --sparse                handle sparse files efficiently\n");
   rprintf(F," -n, --dry-run               show what would have been transferred\n");
@@ -428,6 +430,9 @@ static struct poptOption long_options[] 
   {"times",           't', POPT_ARG_VAL,    &preserve_times, 1, 0, 0 },
   {"no-times",         0,  POPT_ARG_VAL,    &preserve_times, 0, 0, 0 },
   {"no-t",             0,  POPT_ARG_VAL,    &preserve_times, 0, 0, 0 },
+  {"atimes",          'U', POPT_ARG_VAL,    &preserve_atimes, 1, 0, 0 },
+  {"no-atimes",        0,  POPT_ARG_VAL,    &preserve_atimes, 0, 0, 0 },
+  {"no-k",             0,  POPT_ARG_VAL,    &preserve_atimes, 0, 0, 0 },
   {"omit-dir-times",  'O', POPT_ARG_VAL,    &omit_dir_times, 2, 0, 0 },
   {"modify-window",    0,  POPT_ARG_INT,    &modify_window, OPT_MODIFY_WINDOW, 0, 0 },
   {"super",            0,  POPT_ARG_VAL,    &am_root, 2, 0, 0 },
@@ -1538,6 +1543,8 @@ void server_options(char **args,int *arg
 		argstr[x++] = 'D';
 	if (preserve_times)
 		argstr[x++] = 't';
+	if (preserve_atimes)
+		argstr[x++] = 'U';
 	if (preserve_perms)
 		argstr[x++] = 'p';
 	else if (preserve_executability && am_sender)
--- old/rsync.c
+++ new/rsync.c
@@ -34,6 +34,7 @@ extern int verbose;
 extern int dry_run;
 extern int preserve_perms;
 extern int preserve_executability;
+extern int preserve_atimes;
 extern int preserve_times;
 extern int omit_dir_times;
 extern int am_root;
@@ -49,6 +50,7 @@ extern int keep_dirlinks;
 extern int make_backups;
 extern mode_t orig_umask;
 extern struct stats stats;
+extern unsigned int file_struct_len;
 extern struct chmod_mode_struct *daemon_chmod_modes;
 
 #if defined HAVE_ICONV_OPEN && defined HAVE_ICONV_H
@@ -129,6 +131,7 @@ int set_file_attrs(char *fname, struct f
 	int updated = 0;
 	STRUCT_STAT st2;
 	int change_uid, change_gid;
+	time_t atime, mtime;
 	mode_t new_mode = file->mode;
 
 	if (!st) {
@@ -148,18 +151,36 @@ int set_file_attrs(char *fname, struct f
 		}
 	}
 
+	/* This code must be the first update in the function due to
+	 * how it uses the "updated" variable. */
 	if (!preserve_times || (S_ISDIR(st->st_mode) && omit_dir_times))
 		flags |= ATTRS_SKIP_MTIME;
+	if (!preserve_atimes || S_ISDIR(st->st_mode))
+		flags |= ATTRS_SKIP_ATIME;
 	if (!(flags & ATTRS_SKIP_MTIME)
 	    && cmp_time(st->st_mtime, file->modtime) != 0) {
-		int ret = set_modtime(fname, file->modtime, st->st_mode);
+		mtime = file->modtime;
+		updated = 1;
+	} else
+		mtime = st->st_mtime;
+	if (!(flags & ATTRS_SKIP_ATIME)) {
+		time_t file_atime = IVAL(ATIME_PTR(file), 0);
+		if (cmp_time(st->st_atime, file_atime) != 0) {
+			atime = file_atime;
+			updated = 1;
+		} else
+			atime = st->st_atime;
+	} else
+		atime = st->st_atime;
+	if (updated) {
+		int ret = set_times(fname, mtime, atime, st->st_mode);
 		if (ret < 0) {
 			rsyserr(FERROR, errno, "failed to set times on %s",
 				full_fname(fname));
 			return 0;
 		}
-		if (ret == 0) /* ret == 1 if symlink could not be set */
-			updated = 1;
+		if (ret > 0) /* ret == 1 if symlink could not be set */
+			updated = 0;
 	}
 
 	change_uid = am_root && preserve_uid && st->st_uid != file->uid;
--- old/rsync.h
+++ new/rsync.h
@@ -54,6 +54,7 @@
 #define XMIT_HAS_IDEV_DATA (1<<9)
 #define XMIT_SAME_DEV (1<<10)
 #define XMIT_RDEV_MINOR_IS_SMALL (1<<11)
+#define XMIT_SAME_ATIME (1<<12)
 
 /* These flags are used in the live flist data. */
 
@@ -120,6 +121,7 @@
 
 #define ATTRS_REPORT		(1<<0)
 #define ATTRS_SKIP_MTIME	(1<<1)
+#define ATTRS_SKIP_ATIME	(1<<2)
 
 #define FULL_FLUSH	1
 #define NORMAL_FLUSH	0
@@ -534,6 +536,8 @@ struct file_struct {
 	uchar flags;	/* this item MUST remain last */
 };
 
+#define ATIME_PTR(f) (((uchar*)(f))+file_struct_len)
+
 /*
  * Start the flist array at FLIST_START entries and grow it
  * by doubling until FLIST_LINEAR then grow by FLIST_LINEAR
--- old/rsync.yo
+++ new/rsync.yo
@@ -328,8 +328,9 @@ to the detailed description below for a 
      --devices               preserve device files (super-user only)
      --specials              preserve special files
  -D                          same as --devices --specials
- -t, --times                 preserve times
- -O, --omit-dir-times        omit directories when preserving times
+ -t, --times                 preserve modify times
+ -O, --omit-dir-times        omit directories when preserving mod-times
+ -U, --atimes                preserve access (use) times
      --super                 receiver attempts super-user activities
  -S, --sparse                handle sparse files efficiently
  -n, --dry-run               show what would have been transferred
@@ -869,6 +870,12 @@ it is preserving modification times (see
 the directories on the receiving side, it is a good idea to use bf(-O).
 This option is inferred if you use bf(--backup) without bf(--backup-dir).
 
+dit(bf(-U, --atimes)) This tells rsync to set the access (use) times of the
+destination files to the same value as the source files.  Note that the
+reading of the source file may update the atime of the source files, so
+repeated rsync runs with --atimes may be needed if you want to force the
+access-time values to be 100% identical on the two systems.
+
 dit(bf(--super)) This tells the receiving side to attempt super-user
 activities even if the receiving rsync wasn't run by the super-user.  These
 activities include: preserving users via the bf(--owner) option, preserving
@@ -1396,7 +1403,7 @@ with older versions of rsync, but that a
 verbose messages).
 
 The "%i" escape has a cryptic output that is 9 letters long.  The general
-format is like the string bf(YXcstpogz), where bf(Y) is replaced by the
+format is like the string bf(YXcstpogu), where bf(Y) is replaced by the
 type of update being done, bf(X) is replaced by the file-type, and the
 other letters represent attributes that may be output if they are being
 modified.
@@ -1436,7 +1443,7 @@ quote(itemization(
   by the file transfer.
   it() A bf(t) means the modification time is different and is being updated
   to the sender's value (requires bf(--times)).  An alternate value of bf(T)
-  means that the time will be set to the transfer time, which happens
+  means that the modify time will be set to the transfer time, which happens
   anytime a symlink is transferred, or when a file or device is transferred
   without bf(--times).
   it() A bf(p) means the permissions are different and are being updated to
@@ -1445,7 +1452,10 @@ quote(itemization(
   sender's value (requires bf(--owner) and super-user privileges).
   it() A bf(g) means the group is different and is being updated to the
   sender's value (requires bf(--group) and the authority to set the group).
-  it() The bf(z) slot is reserved for future use.
+  it() A bf(u) means the access (use) time is different and is being updated to
+  the sender's value (requires bf(--atimes)).  An alternate value of bf(U)
+  means that the access time will be set to the transfer time, which happens
+  when a symlink or directory is updated.
 ))
 
 One other output is possible:  when deleting files, the "%i" will output
--- old/sender.c
+++ new/sender.c
@@ -41,6 +41,7 @@ extern int do_progress;
 extern int inplace;
 extern int batch_fd;
 extern int write_batch;
+extern unsigned int file_struct_len;
 extern struct stats stats;
 extern struct file_list *the_file_list;
 extern char *stdout_format;
--- old/testsuite/atimes.test
+++ new/testsuite/atimes.test
@@ -0,0 +1,19 @@
+#! /bin/sh
+
+# Test rsync copying atimes
+
+. "$suitedir/rsync.fns"
+
+set -x
+
+mkdir "$fromdir"
+
+touch "$fromdir/foo"
+touch -a -t 200102031717.42 "$fromdir/foo"
+
+TLS_ARGS=--atime
+
+checkit "$RSYNC -rtUgvvv \"$fromdir/\" \"$todir/\"" "$fromdir" "$todir"
+
+# The script would have aborted on error, so getting here means we've won.
+exit 0
--- old/testsuite/rsync.fns
+++ new/testsuite/rsync.fns
@@ -66,7 +66,7 @@ printmsg() {
 }
 
 rsync_ls_lR() {
-    find "$@" -print | sort | sed 's/ /\\ /g' | xargs "$TOOLDIR/tls"
+    find "$@" -print | sort | sed 's/ /\\ /g' | xargs "$TOOLDIR/tls" $TLS_ARGS
 }
 
 check_perms() {
@@ -184,6 +184,10 @@ checkit() {
     # We can just write everything to stdout/stderr, because the
     # wrapper hides it unless there is a problem.
 
+    if test x$TLS_ARGS = x--atime; then
+	( cd "$2" && rsync_ls_lR . ) > "$tmpdir/ls-from"
+    fi
+
     echo "Running: \"$1\""  
     eval "$1" 
     status=$?
@@ -191,10 +195,13 @@ checkit() {
 	failed="YES";
     fi
 
+    if test x$TLS_ARGS != x--atime; then
+	( cd "$2" && rsync_ls_lR . ) > "$tmpdir/ls-from"
+    fi
+
     echo "-------------"
     echo "check how the directory listings compare with diff:"
     echo ""
-    ( cd "$2" && rsync_ls_lR . ) > "$tmpdir/ls-from"
     ( cd "$3" && rsync_ls_lR . ) > "$tmpdir/ls-to"
     diff $diffopt "$tmpdir/ls-from" "$tmpdir/ls-to" || failed=YES
 
--- old/tls.c
+++ new/tls.c
@@ -34,6 +34,7 @@
  * change. */
 
 #include "rsync.h"
+#include "popt.h"
 
 #define PROGRAM "tls"
 
@@ -43,6 +44,8 @@ int read_only = 1;
 int list_only = 0;
 int preserve_perms = 0;
 
+static int display_atime = 0;
+ 
 static void failed(char const *what, char const *where)
 {
 	fprintf(stderr, PROGRAM ": %s %s: %s\n",
@@ -50,12 +53,29 @@ static void failed(char const *what, cha
 	exit(1);
 }
 
+static void storetime(char *dest, time_t t, size_t destsize)
+{
+	if (t) {
+		struct tm *mt = gmtime(&t);
+
+		snprintf(dest, destsize,
+			"%04d-%02d-%02d %02d:%02d:%02d ",
+			(int)mt->tm_year + 1900,
+			(int)mt->tm_mon + 1,
+			(int)mt->tm_mday,
+			(int)mt->tm_hour,
+			(int)mt->tm_min,
+			(int)mt->tm_sec);
+	} else
+		strlcpy(dest, "                    ", destsize);
+}
+
 static void list_file(const char *fname)
 {
 	STRUCT_STAT buf;
 	char permbuf[PERMSTRING_SIZE];
-	struct tm *mt;
-	char datebuf[50];
+	char mtimebuf[50];
+	char atimebuf[50];
 	char linkbuf[4096];
 
 	if (do_lstat(fname, &buf) < 0)
@@ -88,19 +108,8 @@ static void list_file(const char *fname)
 
 	permstring(permbuf, buf.st_mode);
 
-	if (buf.st_mtime) {
-		mt = gmtime(&buf.st_mtime);
-
-		snprintf(datebuf, sizeof datebuf,
-			"%04d-%02d-%02d %02d:%02d:%02d",
-			(int)mt->tm_year + 1900,
-			(int)mt->tm_mon + 1,
-			(int)mt->tm_mday,
-			(int)mt->tm_hour,
-			(int)mt->tm_min,
-			(int)mt->tm_sec);
-	} else
-		strlcpy(datebuf, "                   ", sizeof datebuf);
+	storetime(mtimebuf, buf.st_mtime, sizeof mtimebuf);
+	storetime(atimebuf, buf.st_atime, sizeof atimebuf);
 
 	/* TODO: Perhaps escape special characters in fname? */
 
@@ -111,23 +120,55 @@ static void list_file(const char *fname)
 		    (long)minor(buf.st_rdev));
 	} else /* NB: use double for size since it might not fit in a long. */
 		printf("%12.0f", (double)buf.st_size);
-	printf(" %6ld.%-6ld %6ld %s %s%s\n",
+	printf(" %6ld.%-6ld %6ld %s%s%s%s\n",
 	       (long)buf.st_uid, (long)buf.st_gid, (long)buf.st_nlink,
-	       datebuf, fname, linkbuf);
+ 	       mtimebuf, display_atime && !S_ISDIR(buf.st_mode) ? atimebuf : "",
+	       fname, linkbuf);
+}
+
+static struct poptOption long_options[] = {
+  /* longName, shortName, argInfo, argPtr, value, descrip, argDesc */
+  {"atime",           'u', POPT_ARG_NONE,   &display_atime, 0,   0, 0},
+  {"help",            'h', POPT_ARG_NONE,   0,              'h', 0, 0},
+  {0,0,0,0,0,0,0}
+};
+
+static void tls_usage(int ret)
+{
+	fprintf(stderr, "usage: " PROGRAM " [--atime | -u] DIR ...\n"
+	    "Trivial file listing program for portably checking rsync\n");
+	exit(ret);
 }
 
 int
 main(int argc, char *argv[])
 {
-	if (argc < 2) {
-		fprintf(stderr, "usage: " PROGRAM " DIR ...\n"
-			"Trivial file listing program for portably checking rsync\n");
-		return 1;
-	}
+	poptContext pc;
+	const char **extra_args;
+	int opt;
 
-	for (argv++; *argv; argv++) {
-		list_file(*argv);
+	pc = poptGetContext(PROGRAM, argc, (const char **)argv,
+			    long_options, 0);
+	while ((opt = poptGetNextOpt(pc)) != -1) {
+		switch (opt) {
+		case 'h':
+			tls_usage(0);
+		default:
+			fprintf(stderr,
+			        "%s: %s\n",
+				poptBadOption(pc, POPT_BADOPTION_NOALIAS),
+				poptStrerror(opt));
+			tls_usage(1);
+		}
 	}
 
+	extra_args = poptGetArgs(pc);
+	if (*extra_args == NULL)
+		tls_usage(1);
+
+	for (; *extra_args; extra_args++)
+		list_file(*extra_args);
+	poptFreeContext(pc);
+
 	return 0;
 }
--- old/util.c
+++ new/util.c
@@ -121,7 +121,7 @@ NORETURN void overflow_exit(const char *
 	exit_cleanup(RERR_MALLOC);
 }
 
-int set_modtime(const char *fname, time_t modtime, mode_t mode)
+int set_times(const char *fname, time_t modtime, time_t atime, mode_t mode)
 {
 #if !defined HAVE_LUTIMES || !defined HAVE_UTIMES
 	if (S_ISLNK(mode))
@@ -129,9 +129,13 @@ int set_modtime(const char *fname, time_
 #endif
 
 	if (verbose > 2) {
-		rprintf(FINFO, "set modtime of %s to (%ld) %s",
+		char mtimebuf[200];
+
+		strlcpy(mtimebuf, timestring(modtime), sizeof mtimebuf);
+		rprintf(FINFO,
+			"set modtime, atime of %s to (%ld) %s, (%ld) %s\n",
 			fname, (long)modtime,
-			asctime(localtime(&modtime)));
+			mtimebuf, (long)atime, timestring(atime));
 	}
 
 	if (dry_run)
@@ -140,7 +144,7 @@ int set_modtime(const char *fname, time_
 	{
 #ifdef HAVE_UTIMES
 		struct timeval t[2];
-		t[0].tv_sec = time(NULL);
+		t[0].tv_sec = atime;
 		t[0].tv_usec = 0;
 		t[1].tv_sec = modtime;
 		t[1].tv_usec = 0;
@@ -153,12 +157,12 @@ int set_modtime(const char *fname, time_
 		return utimes(fname, t);
 #elif defined HAVE_UTIMBUF
 		struct utimbuf tbuf;
-		tbuf.actime = time(NULL);
+		tbuf.actime = atime;
 		tbuf.modtime = modtime;
 		return utime(fname,&tbuf);
 #elif defined HAVE_UTIME
 		time_t t[2];
-		t[0] = time(NULL);
+		t[0] = atime;
 		t[1] = modtime;
 		return utime(fname,t);
 #else
