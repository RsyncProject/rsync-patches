This patch from Antti Tapaninen added the --omit-dir-changes option, which
tells rsync to not affect any attributes on the directories in the transfer.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/omit-dir-changes.diff
    ./configure                              (optional if already run)
    make

--- old/generator.c
+++ new/generator.c
@@ -46,6 +46,7 @@ extern int preserve_uid;
 extern int preserve_gid;
 extern int preserve_times;
 extern int omit_dir_times;
+extern int omit_dir_changes;
 extern int delete_mode;
 extern int delete_before;
 extern int delete_during;
@@ -555,6 +556,7 @@ void itemize(const char *fnamecmp, struc
 		int keep_time = !preserve_times ? 0
 		    : S_ISDIR(file->mode) ? !omit_dir_times
 		    : !S_ISLNK(file->mode);
+		int omit_changes = omit_dir_changes && S_ISDIR(sxp->st.st_mode);
 
 		if (S_ISREG(file->mode) && F_LENGTH(file) != sxp->st.st_size)
 			iflags |= ITEM_REPORT_SIZE;
@@ -565,10 +567,11 @@ void itemize(const char *fnamecmp, struc
 			iflags |= ITEM_REPORT_TIME;
 		if (!BITS_EQUAL(sxp->st.st_mode, file->mode, CHMOD_BITS))
 			iflags |= ITEM_REPORT_PERMS;
-		if (preserve_uid && am_root && (uid_t)F_OWNER(file) != sxp->st.st_uid)
+		if (preserve_uid && am_root && !omit_changes
+		 && (uid_t)F_OWNER(file) != sxp->st.st_uid)
 			iflags |= ITEM_REPORT_OWNER;
-		if (preserve_gid && !(file->flags & FLAG_SKIP_GROUP)
-		    && sxp->st.st_gid != (gid_t)F_GROUP(file))
+		if (preserve_gid && !omit_changes
+		 && !(file->flags & FLAG_SKIP_GROUP) && sxp->st.st_gid != (gid_t)F_GROUP(file))
 			iflags |= ITEM_REPORT_GROUP;
 #ifdef SUPPORT_ACLS
 		if (preserve_acls && !S_ISLNK(file->mode)) {
@@ -1228,7 +1231,7 @@ static void recv_generator(char *fname, 
 				statret = -1;
 			new_root_dir = 0;
 		}
-		if (!preserve_perms) { /* See comment in non-dir code below. */
+		if (!preserve_perms || omit_dir_changes) { /* See comment in non-dir code below. */
 			file->mode = dest_mode(file->mode, sx.st.st_mode,
 					       dflt_perms, statret == 0);
 		}
--- old/options.c
+++ new/options.c
@@ -56,6 +56,7 @@ int preserve_uid = 0;
 int preserve_gid = 0;
 int preserve_times = 0;
 int omit_dir_times = 0;
+int omit_dir_changes = 0;
 int update_only = 0;
 int cvs_exclude = 0;
 int dry_run = 0;
@@ -336,6 +337,7 @@ void usage(enum logcode F)
   rprintf(F," -D                          same as --devices --specials\n");
   rprintf(F," -t, --times                 preserve times\n");
   rprintf(F," -O, --omit-dir-times        omit directories when preserving times\n");
+  rprintf(F,"     --omit-dir-changes      omit directories when preserving any attributes\n");
   rprintf(F,"     --super                 receiver attempts super-user activities\n");
 #ifdef SUPPORT_XATTRS
   rprintf(F,"     --fake-super            store/recover privileged attrs using xattrs\n");
@@ -469,6 +471,7 @@ static struct poptOption long_options[] 
   {"no-times",         0,  POPT_ARG_VAL,    &preserve_times, 0, 0, 0 },
   {"no-t",             0,  POPT_ARG_VAL,    &preserve_times, 0, 0, 0 },
   {"omit-dir-times",  'O', POPT_ARG_VAL,    &omit_dir_times, 2, 0, 0 },
+  {"omit-dir-changes", 0,  POPT_ARG_NONE,   &omit_dir_changes, 0, 0, 0 },
   {"modify-window",    0,  POPT_ARG_INT,    &modify_window, OPT_MODIFY_WINDOW, 0, 0 },
   {"super",            0,  POPT_ARG_VAL,    &am_root, 2, 0, 0 },
   {"no-super",         0,  POPT_ARG_VAL,    &am_root, 0, 0, 0 },
@@ -1397,6 +1400,9 @@ int parse_arguments(int *argc, const cha
 			"P *%s", backup_suffix);
  		parse_rule(&filter_list, backup_dir_buf, 0, 0);
 	}
+
+	if (omit_dir_changes)
+		omit_dir_times = 2;
 	if (make_backups && !backup_dir)
 		omit_dir_times = 1;
 
@@ -1626,6 +1632,8 @@ void server_options(char **args,int *arg
 			argstr[x++] = 'm';
 		if (omit_dir_times == 2)
 			argstr[x++] = 'O';
+		if (omit_dir_changes == 1)
+			args[ac++] = "--omit-dir-changes";
 	} else {
 		if (copy_links)
 			argstr[x++] = 'L';
--- old/rsync.c
+++ new/rsync.c
@@ -34,6 +34,7 @@ extern int preserve_perms;
 extern int preserve_executability;
 extern int preserve_times;
 extern int omit_dir_times;
+extern int omit_dir_changes;
 extern int am_root;
 extern int am_server;
 extern int am_sender;
@@ -322,9 +323,11 @@ int set_file_attrs(const char *fname, st
 			updated = 1;
 	}
 
-	change_uid = am_root && preserve_uid && sxp->st.st_uid != (uid_t)F_OWNER(file);
+	change_uid = am_root && preserve_uid && sxp->st.st_uid != (uid_t)F_OWNER(file)
+		  && !(omit_dir_changes && S_ISDIR(sxp->st.st_mode));
 	change_gid = preserve_gid && !(file->flags & FLAG_SKIP_GROUP)
-		  && sxp->st.st_gid != (gid_t)F_GROUP(file);
+		  && sxp->st.st_gid != (gid_t)F_GROUP(file)
+		  && !(omit_dir_changes && S_ISDIR(sxp->st.st_mode));
 #if !defined HAVE_LCHOWN && !defined CHOWN_MODIFIES_SYMLINK
 	if (S_ISLNK(sxp->st.st_mode))
 		;
