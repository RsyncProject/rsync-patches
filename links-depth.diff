The attached patch gives the user ability to define how many symbolic
links rsync should follow before actually adding it to the file list.

The patch has been heavily modified from its original form to work
with the latest codebase, but even in its original form it didn't
handle relative symlinks properly, and that has not yet been fixed
in this modified version.

--- orig/flist.c	2005-11-10 16:58:36
+++ flist.c	2004-07-16 16:58:04
@@ -45,6 +45,7 @@ extern int filesfrom_fd;
 extern int one_file_system;
 extern int keep_dirlinks;
 extern int preserve_links;
+extern int follow_links_depth;
 extern int preserve_hard_links;
 extern int preserve_perms;
 extern int preserve_devices;
@@ -718,6 +719,30 @@ static struct file_struct *receive_file_
 	return file;
 }
 
+#if SUPPORT_LINKS
+static int links_depth(char *linkname, STRUCT_STAT *st_ptr)
+{
+	char buf[MAXPATHLEN];
+	STRUCT_STAT st;
+	int i;
+
+	for (i = 0; i < follow_links_depth; i++) {
+		/* XXX This doesn't handle relative symlinks! */
+		if (readlink_stat(linkname, &st, buf) != 0)
+			break;
+		*st_ptr = st;
+		if (!S_ISLNK(st.st_mode))
+			return 1;
+		strlcpy(linkname, buf, MAXPATHLEN);
+#if 0
+		fprintf(stderr, "\n%s:%i [#%i] %s -> %s\n", __FILE__, __LINE__, i, file->u.link, linkname);
+#endif
+	}
+
+	return 0;
+}
+#endif
+
 /**
  * Create a file_struct for a named file by reading its stat()
  * information and performing extensive checks against global
@@ -843,7 +868,13 @@ struct file_struct *make_file(char *fnam
 	basename_len = strlen(basename) + 1; /* count the '\0' */
 
 #ifdef SUPPORT_LINKS
-	linkname_len = S_ISLNK(st.st_mode) ? strlen(linkname) + 1 : 0;
+	if (S_ISLNK(st.st_mode)) {
+		if (follow_links_depth && links_depth(linkname, &st))
+			linkname_len = 0;
+		else
+			linkname_len = strlen(linkname) + 1;
+	} else
+		linkname_len = 0;
 #else
 	linkname_len = 0;
 #endif
--- orig/options.c	2005-11-15 07:01:03
+++ options.c	2005-08-27 21:22:39
@@ -43,6 +43,7 @@ int append_mode = 0;
 int keep_dirlinks = 0;
 int copy_links = 0;
 int preserve_links = 0;
+int follow_links_depth = 0;
 int preserve_hard_links = 0;
 int preserve_perms = 0;
 int preserve_devices = 0;
@@ -284,6 +285,7 @@ void usage(enum logcode F)
   rprintf(F,"     --append                append data onto shorter files\n");
   rprintf(F," -d, --dirs                  transfer directories without recursing\n");
   rprintf(F," -l, --links                 copy symlinks as symlinks\n");
+  rprintf(F,"     --links-depth=NUM       follow symlinks up to NUM depth\n");
   rprintf(F," -L, --copy-links            transform symlink into referent file/dir\n");
   rprintf(F,"     --copy-unsafe-links     only \"unsafe\" symlinks are transformed\n");
   rprintf(F,"     --safe-links            ignore symlinks that point outside the source tree\n");
@@ -416,6 +418,7 @@ static struct poptOption long_options[] 
   {"links",           'l', POPT_ARG_VAL,    &preserve_links, 1, 0, 0 },
   {"no-links",         0,  POPT_ARG_VAL,    &preserve_links, 0, 0, 0 },
   {"no-l",             0,  POPT_ARG_VAL,    &preserve_links, 0, 0, 0 },
+  {"links-depth",      0,  POPT_ARG_INT,    &follow_links_depth , 0, 0, 0 },
   {"copy-links",      'L', POPT_ARG_NONE,   &copy_links, 0, 0, 0 },
   {"copy-unsafe-links",0,  POPT_ARG_NONE,   &copy_unsafe_links, 0, 0, 0 },
   {"safe-links",       0,  POPT_ARG_NONE,   &safe_symlinks, 0, 0, 0 },
--- orig/rsync.yo	2005-11-15 07:01:04
+++ rsync.yo	2005-01-28 19:33:40
@@ -310,6 +310,7 @@ to the detailed description below for a 
      --append                append data onto shorter files
  -d, --dirs                  transfer directories without recursing
  -l, --links                 copy symlinks as symlinks
+     --links-depth=NUM       follow symlinks up to NUM depth
  -L, --copy-links            transform symlink into referent file/dir
      --copy-unsafe-links     only "unsafe" symlinks are transformed
      --safe-links            ignore symlinks that point outside the tree
