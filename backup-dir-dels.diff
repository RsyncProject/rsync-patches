This patches creates two new command line options as follows:
	--backup-dir-dels=DIR
	--suffix-dels=SUFFIX

The backup-dir-dels and suffix-dels options give the ability to store
backup of removed files on the receiver in different directories or with
different suffix than the backup of files that have been changed but that
are still on the source drive.  Both commands can be combined.

The default behaviour if one or both of the options are not specified
is the previous behaviour, both backups use the same directory or
suffix.

Marc St-Onge

To use this patch, run these commands for a successful build:

    patch -p1 <patches/backup-deleted.diff
    patch -p1 <patches/backup-dir-dels.diff
    ./configure                                 (optional if already run)
    make

based-on: patch/master/backup-deleted
diff --git a/backup.c b/backup.c
--- a/backup.c
+++ b/backup.c
@@ -29,25 +29,32 @@ extern int preserve_specials;
 extern int preserve_links;
 extern int safe_symlinks;
 extern int backup_dir_len;
+extern int backup_dir_dels_len;
 extern unsigned int backup_dir_remainder;
+extern unsigned int backup_dir_dels_remainder;
 extern char backup_dir_buf[MAXPATHLEN];
+extern char backup_dir_dels_buf[MAXPATHLEN];
 extern char *backup_suffix;
+extern char *backup_suffix_dels;
 extern char *backup_dir;
+extern char *backup_dir_dels;
+
+static BOOL deleting;
 
 /* Returns -1 on error, 0 on missing dir, and 1 on present dir. */
-static int validate_backup_dir(void)
+static int validate_backup_dir(char *buf)
 {
 	STRUCT_STAT st;
 
-	if (do_lstat(backup_dir_buf, &st) < 0) {
+	if (do_lstat(buf, &st) < 0) {
 		if (errno == ENOENT)
 			return 0;
-		rsyserr(FERROR, errno, "backup lstat %s failed", backup_dir_buf);
+		rsyserr(FERROR, errno, "backup lstat %s failed", buf);
 		return -1;
 	}
 	if (!S_ISDIR(st.st_mode)) {
 		int flags = get_del_for_flag(st.st_mode) | DEL_FOR_BACKUP | DEL_RECURSE;
-		if (delete_item(backup_dir_buf, st.st_mode, flags) == 0)
+		if (delete_item(buf, st.st_mode, flags) == 0)
 			return 0;
 		return -1;
 	}
@@ -58,20 +65,20 @@ static int validate_backup_dir(void)
  * backup_dir_buf.  Any new directories (compared to the prior backup
  * path) are ensured to exist as directories, replacing anything else
  * that may be in the way (e.g. a symlink). */
-static BOOL copy_valid_path(const char *fname)
+static BOOL copy_valid_path(const char *fname, char *buf, int prefix_len, unsigned int remainder, const char *suffix)
 {
 	const char *f;
 	int val;
 	BOOL ret = True;
 	stat_x sx;
-	char *b, *rel = backup_dir_buf + backup_dir_len, *name = rel;
+	char *b, *rel = buf + prefix_len, *name = rel;
 
 	for (f = fname, b = rel; *f && *f == *b; f++, b++) {
 		if (*b == '/')
 			name = b + 1;
 	}
 
-	if (stringjoin(rel, backup_dir_remainder, fname, backup_suffix, NULL) >= backup_dir_remainder) {
+	if (stringjoin(rel, remainder, fname, suffix, NULL) >= remainder) {
 		rprintf(FERROR, "backup filename too long\n");
 		*name = '\0';
 		return False;
@@ -82,7 +89,7 @@ static BOOL copy_valid_path(const char *fname)
 			return True;
 		*b = '\0';
 
-		val = validate_backup_dir();
+		val = validate_backup_dir(buf);
 		if (val == 0)
 			break;
 		if (val < 0) {
@@ -98,9 +105,9 @@ static BOOL copy_valid_path(const char *fname)
 	for ( ; b; name = b + 1, b = strchr(name, '/')) {
 		*b = '\0';
 
-		while (do_mkdir(backup_dir_buf, ACCESSPERMS) < 0) {
+		while (do_mkdir(buf, ACCESSPERMS) < 0) {
 			if (errno == EEXIST) {
-				val = validate_backup_dir();
+				val = validate_backup_dir(buf);
 				if (val > 0)
 					break;
 				if (val == 0)
@@ -134,7 +141,7 @@ static BOOL copy_valid_path(const char *fname)
 				free_xattr(&sx);
 			}
 #endif
-			set_file_attrs(backup_dir_buf, file, NULL, NULL, 0);
+			set_file_attrs(buf, file, NULL, NULL, 0);
 			unmake_file(file);
 		}
 
@@ -156,28 +163,34 @@ static BOOL copy_valid_path(const char *fname)
 /* Make a complete pathname for backup file and verify any new path elements. */
 char *get_backup_name(const char *fname)
 {
+	char *buf = deleting ? backup_dir_dels_buf : backup_dir_buf;
+	char *suffix = deleting ? backup_suffix_dels : backup_suffix;
+
 	if (backup_dir) {
 		static int initialized = 0;
-		if (!initialized) {
+		int prefix_len = deleting ? backup_dir_dels_len : backup_dir_len;
+		unsigned int remainder = deleting ? backup_dir_dels_remainder : backup_dir_remainder;
+		int init_bits = deleting ? 2 : 1;
+		if (!(initialized & init_bits)) {
 			int ret;
-			if (backup_dir_len > 1)
-				backup_dir_buf[backup_dir_len-1] = '\0';
-			ret = make_path(backup_dir_buf, 0);
-			if (backup_dir_len > 1)
-				backup_dir_buf[backup_dir_len-1] = '/';
+			if (prefix_len > 1)
+				buf[prefix_len-1] = '\0';
+			ret = make_path(buf, 0);
+			if (prefix_len > 1)
+				buf[prefix_len-1] = '/';
 			if (ret < 0)
 				return NULL;
-			initialized = 1;
+			initialized |= init_bits;
 		}
 		/* copy fname into backup_dir_buf while validating the dirs. */
-		if (copy_valid_path(fname))
-			return backup_dir_buf;
+		if (copy_valid_path(fname, buf, prefix_len, remainder, suffix))
+			return buf;
 		/* copy_valid_path() has printed an error message. */
 		return NULL;
 	}
 
-	if (stringjoin(backup_dir_buf, MAXPATHLEN, fname, backup_suffix, NULL) < MAXPATHLEN)
-		return backup_dir_buf;
+	if (stringjoin(buf, MAXPATHLEN, fname, suffix, NULL) < MAXPATHLEN)
+		return buf;
 
 	rprintf(FERROR, "backup filename too long\n");
 	return NULL;
@@ -352,3 +365,13 @@ int make_backup(const char *fname, BOOL prefer_rename)
 		rprintf(FINFO, "backed up %s to %s\n", fname, buf);
 	return ret;
 }
+
+/* backup switch routine called only when backing-up removed file */
+int safe_delete(const char *fname)
+{
+	int ret;
+	deleting = 1;
+	ret = make_backup(fname, True);
+	deleting = 0;
+	return ret;
+}
diff --git a/delete.c b/delete.c
--- a/delete.c
+++ b/delete.c
@@ -28,16 +28,23 @@ extern int max_delete;
 extern char *backup_dir;
 extern char *backup_suffix;
 extern int backup_suffix_len;
+extern char *backup_dir_dels;
+extern char *backup_suffix_dels;
+extern int backup_suffix_dels_len;
 extern struct stats stats;
 
 int ignore_perishable = 0;
 int non_perishable_cnt = 0;
 int skipped_deletes = 0;
 
+/* Function now compares both backup_suffix and backup_suffix_dels. */
 static inline int is_backup_file(char *fn)
 {
 	int k = strlen(fn) - backup_suffix_len;
-	return k > 0 && strcmp(fn+k, backup_suffix) == 0;
+	if (k > 0 && strcmp(fn+k, backup_suffix) == 0)
+		return 1;
+	k += backup_suffix_len - backup_suffix_dels_len;
+	return k > 0 && strcmp(fn+k, backup_suffix_dels) == 0;
 }
 
 /* The directory is about to be deleted: if DEL_RECURSE is given, delete all
@@ -162,9 +169,9 @@ enum delret delete_item(char *fbuf, uint16 mode, uint16 flags)
 		what = "rmdir";
 		ok = do_rmdir(fbuf) == 0;
 	} else {
-		if (make_backups > 0 && !(flags & DEL_FOR_BACKUP) && (backup_dir || !is_backup_file(fbuf))) {
+		if (make_backups > 0 && !(flags & DEL_FOR_BACKUP) && (backup_dir_dels || !is_backup_file(fbuf))) {
 			what = "make_backup";
-			ok = make_backup(fbuf, True);
+			ok = safe_delete(fbuf);
 			if (ok == 2) {
 				what = "unlink";
 				ok = robust_unlink(fbuf) == 0;
diff --git a/options.c b/options.c
--- a/options.c
+++ b/options.c
@@ -153,10 +153,14 @@ int no_detach
 int write_batch = 0;
 int read_batch = 0;
 int backup_dir_len = 0;
+int backup_dir_dels_len = 0;
 int backup_suffix_len;
+int backup_suffix_dels_len;
 unsigned int backup_dir_remainder;
+unsigned int backup_dir_dels_remainder;
 
 char *backup_suffix = NULL;
+char *backup_suffix_dels = NULL;
 char *tmpdir = NULL;
 char *partial_dir = NULL;
 char *basis_dir[MAX_BASIS_DIRS+1];
@@ -168,7 +172,9 @@ char *stdout_format = NULL;
 char *password_file = NULL;
 char *rsync_path = RSYNC_PATH;
 char *backup_dir = NULL;
+char *backup_dir_dels = NULL;
 char backup_dir_buf[MAXPATHLEN];
+char backup_dir_dels_buf[MAXPATHLEN];
 char *sockopts = NULL;
 char *usermap = NULL;
 char *groupmap = NULL;
@@ -681,6 +687,8 @@ void usage(enum logcode F)
   rprintf(F,"     --backup-deleted        make backups only of deleted files\n");
   rprintf(F,"     --backup-dir=DIR        make backups into hierarchy based in DIR\n");
   rprintf(F,"     --suffix=SUFFIX         set backup suffix (default %s w/o --backup-dir)\n",BACKUP_SUFFIX);
+  rprintf(F,"     --backup-dir-dels=DIR   backup removed files into hierarchy based in DIR\n");
+  rprintf(F,"     --suffix-dels=SUFFIX    set removed-files suffix (def. --suffix w/o b-d-d)\n");
   rprintf(F," -u, --update                skip files that are newer on the receiver\n");
   rprintf(F,"     --inplace               update destination files in-place (SEE MAN PAGE)\n");
   rprintf(F,"     --append                append data onto shorter files\n");
@@ -999,7 +1007,9 @@ static struct poptOption long_options[] = {
   {"backup-deleted",   0,  POPT_ARG_VAL,    &make_backups, 1, 0, 0 },
   {"no-backup",        0,  POPT_ARG_VAL,    &make_backups, 0, 0, 0 },
   {"backup-dir",       0,  POPT_ARG_STRING, &backup_dir, 0, 0, 0 },
+  {"backup-dir-dels",  0,  POPT_ARG_STRING, &backup_dir_dels, 0, 0, 0 },
   {"suffix",           0,  POPT_ARG_STRING, &backup_suffix, 0, 0, 0 },
+  {"suffix-dels",      0,  POPT_ARG_STRING, &backup_suffix_dels, 0, 0, 0 },
   {"list-only",        0,  POPT_ARG_VAL,    &list_only, 2, 0, 0 },
   {"read-batch",       0,  POPT_ARG_STRING, &batch_name, OPT_READ_BATCH, 0, 0 },
   {"write-batch",      0,  POPT_ARG_STRING, &batch_name, OPT_WRITE_BATCH, 0, 0 },
@@ -2101,6 +2111,8 @@ int parse_arguments(int *argc_p, const char ***argv_p)
 			tmpdir = sanitize_path(NULL, tmpdir, NULL, 0, SP_DEFAULT);
 		if (backup_dir)
 			backup_dir = sanitize_path(NULL, backup_dir, NULL, 0, SP_DEFAULT);
+		if (backup_dir_dels)
+			backup_dir_dels = sanitize_path(NULL, backup_dir_dels, NULL, 0, SP_DEFAULT);
 	}
 	if (daemon_filter_list.head && !am_sender) {
 		filter_rule_list *elp = &daemon_filter_list;
@@ -2122,6 +2134,14 @@ int parse_arguments(int *argc_p, const char ***argv_p)
 			if (check_filter(elp, FLOG, dir, 1) < 0)
 				goto options_rejected;
 		}
+		/* Clean backup_dir_dels same as for backup_dir */
+		if (backup_dir_dels) {
+			if (!*backup_dir_dels)
+				goto options_rejected;
+			clean_fname(backup_dir_dels, 1);
+			if (check_filter(elp, FLOG, backup_dir_dels, 1) < 0)
+				goto options_rejected;
+		}
 	}
 
 	if (!backup_suffix)
@@ -2133,6 +2153,20 @@ int parse_arguments(int *argc_p, const char ***argv_p)
 			backup_suffix);
 		return 0;
 	}
+	/* --suffix-dels defaults to --suffix, or empty for a client given an
+	 * explicit --backup-dir-dels (just as --suffix defaults to empty when
+	 * a --backup-dir is given).  The second case does not apply to the
+	 * server for consistency with server_options, which sends --suffix-dels
+	 * to the server iff it differs from --suffix. */
+	if (!backup_suffix_dels)
+		backup_suffix_dels = backup_dir_dels && !am_server ? "" : backup_suffix;
+	backup_suffix_dels_len = strlen(backup_suffix_dels);
+	if (strchr(backup_suffix_dels, '/') != NULL) {
+		snprintf(err_buf, sizeof err_buf,
+			"--suffix-dels cannot contain slashes: %s\n",
+			backup_suffix_dels);
+		return 0;
+	}
 	if (backup_dir) {
 		size_t len;
 		while (*backup_dir == '.' && backup_dir[1] == '/')
@@ -2168,6 +2202,34 @@ int parse_arguments(int *argc_p, const char ***argv_p)
 			"P *%s", backup_suffix);
 		parse_filter_str(&filter_list, backup_dir_buf, rule_template(0), 0);
 	}
+	if (backup_dir_dels) {
+		backup_dir_dels_len = strlcpy(backup_dir_dels_buf, backup_dir_dels, sizeof backup_dir_dels_buf);
+		backup_dir_dels_remainder = sizeof backup_dir_dels_buf - backup_dir_dels_len;
+		if (backup_dir_dels_remainder < 32) {
+			snprintf(err_buf, sizeof err_buf,
+				"the --backup-dir-dels path is WAY too long.\n");
+			return 0;
+		}
+		if (backup_dir_dels_buf[backup_dir_dels_len - 1] != '/') {
+			backup_dir_dels_buf[backup_dir_dels_len++] = '/';
+			backup_dir_dels_buf[backup_dir_dels_len] = '\0';
+		}
+		if (INFO_GTE(BACKUP, 1) && !am_sender)
+			rprintf(FINFO, "backup_dir_dels is %s\n", backup_dir_dels_buf);
+	} else if (backup_dir) {
+		backup_dir_dels = backup_dir;
+		backup_dir_dels_len = backup_dir_len;
+		backup_dir_dels_remainder = backup_dir_remainder;
+		strlcpy(backup_dir_dels_buf, backup_dir_buf, sizeof backup_dir_buf);
+	} else if (!backup_suffix_dels_len && (!am_server || !am_sender)) {
+		snprintf(err_buf, sizeof err_buf,
+			"--suffix-dels cannot be a null string without --backup-dir-dels\n");
+		return 0;
+	} else if (make_backups && delete_mode && !delete_excluded && !am_server) {
+		snprintf(backup_dir_dels_buf, sizeof backup_dir_dels_buf,
+			"P *%s", backup_suffix_dels);
+		parse_filter_str(&filter_list, backup_dir_dels_buf, rule_template(0), 0);
+	}
 
 	if (preserve_times) {
 		preserve_times = PRESERVE_FILE_TIMES;
@@ -2594,6 +2656,10 @@ void server_options(char **args, int *argc_p)
 		args[ac++] = "--backup-dir";
 		args[ac++] = backup_dir;
 	}
+	if (backup_dir_dels && backup_dir_dels != backup_dir) {
+		args[ac++] = "--backup-dir-dels";
+		args[ac++] = backup_dir_dels;
+	}
 
 	/* Only send --suffix if it specifies a non-default value. */
 	if (strcmp(backup_suffix, backup_dir ? "" : BACKUP_SUFFIX) != 0) {
@@ -2602,6 +2668,14 @@ void server_options(char **args, int *argc_p)
 			goto oom;
 		args[ac++] = arg;
 	}
+	/* Only send --suffix-dels if it specifies a value different from the
+	 * --suffix value, which would normally be used for deletions too. */
+	if (strcmp(backup_suffix_dels, backup_suffix) != 0) {
+		/* We use the following syntax to avoid weirdness with '~'. */
+		if (asprintf(&arg, "--suffix-dels=%s", backup_suffix_dels) < 0)
+			goto oom;
+		args[ac++] = arg;
+	}
 
 	if (checksum_choice) {
 		if (asprintf(&arg, "--checksum-choice=%s", checksum_choice) < 0)
