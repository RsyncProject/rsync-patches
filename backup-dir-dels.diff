This patches creates two new command line options as follows:
	--backup-dir-rm
	--backup-suffix-rm=SUFFIX

The backup-dir-rm and backup-suffix-rm options give the ability to store
backup of removed files on the receiver in different directories or with
different suffix than the backup of files that have been changed but that
are still on the source drive.  Both commands can be combined.

The default behaviour if one or both of the options are not specified
is the previous behaviour, both backups use the same directory or
suffix.

Marc St-Onge

--- orig/backup.c	2005-02-07 20:41:56
+++ backup.c	2004-09-22 02:36:06
@@ -22,11 +22,17 @@
 
 extern int verbose;
 extern int backup_suffix_len;
+extern int backup_suffix_rm_len;
 extern int backup_dir_len;
+extern int backup_dir_rm_len;
 extern unsigned int backup_dir_remainder;
+extern unsigned int backup_dir_rm_remainder;
 extern char backup_dir_buf[MAXPATHLEN];
+extern char backup_dir_rm_buf[MAXPATHLEN];
 extern char *backup_suffix;
+extern char *backup_suffix_rm;
 extern char *backup_dir;
+extern char *backup_dir_rm;
 
 extern int am_root;
 extern int preserve_devices;
@@ -35,6 +41,8 @@ extern int preserve_hard_links;
 extern int orig_umask;
 extern int safe_symlinks;
 
+static int deleting;
+
 /* make a complete pathname for backup file */
 char *get_backup_name(char *fname)
 {
@@ -52,10 +60,27 @@ char *get_backup_name(char *fname)
 	return NULL;
 }
 
+static char *get_delete_name(char *fname)
+{
+	if (backup_dir_rm) {
+		if (stringjoin(backup_dir_rm_buf + backup_dir_rm_len, backup_dir_rm_remainder,
+			       fname, backup_suffix_rm, NULL) < backup_dir_rm_remainder)
+			return backup_dir_rm_buf;
+	} else {
+		if (stringjoin(backup_dir_rm_buf, MAXPATHLEN,
+			       fname, backup_suffix_rm, NULL) < MAXPATHLEN)
+			return backup_dir_rm_buf;
+	}
+
+	rprintf(FERROR, "delete filename too long\n");
+	return NULL;
+}
+
 /* simple backup creates a backup with a suffix in the same directory */
 static int make_simple_backup(char *fname)
 {
-	char *fnamebak = get_backup_name(fname);
+	char *fnamebak = deleting ? get_delete_name(fname)
+				  : get_backup_name(fname);
 
 	if (!fnamebak)
 		return 0;
@@ -83,7 +108,8 @@ path
 static int make_bak_dir(char *fullpath)
 {
 	STRUCT_STAT st;
-	char *rel = fullpath + backup_dir_len;
+	int dir_len = deleting ? backup_dir_rm_len : backup_dir_len;
+	char *rel = fullpath + dir_len;
 	char *end = rel + strlen(rel);
 	char *p = end;
 
@@ -170,7 +196,8 @@ static int keep_backup(char *fname)
 	if (!(file = make_file(fname, NULL, NO_FILTERS)))
 		return 1; /* the file could have disappeared */
 
-	if (!(buf = get_backup_name(fname)))
+	buf = deleting ? get_delete_name(fname) : get_backup_name(fname);
+	if (!buf)
 		return 0;
 
 	/* Check to see if this is a device file, or link */
@@ -263,3 +290,13 @@ int make_backup(char *fname)
 		return keep_backup(fname);
 	return make_simple_backup(fname);
 }
+
+/* backup switch routine called only when backing-up removed file */
+int safe_delete(char *fname)
+{
+	int ret;
+	deleting = 1;
+	ret = make_backup(fname);
+	deleting = 0;
+	return ret;
+}
--- orig/flist.c	2005-02-09 02:37:15
+++ flist.c	2005-01-30 10:11:42
@@ -46,6 +46,8 @@ extern char curr_dir[MAXPATHLEN];
 extern unsigned int curr_dir_len;
 extern char *backup_dir;
 extern char *backup_suffix;
+extern char *backup_dir_rm;
+extern char *backup_suffix_rm;
 extern int filesfrom_fd;
 
 extern int one_file_system;
@@ -60,6 +62,7 @@ extern int relative_paths;
 extern int implied_dirs;
 extern int make_backups;
 extern int backup_suffix_len;
+extern int backup_suffix_rm_len;
 extern int copy_links;
 extern int copy_unsafe_links;
 extern int protocol_version;
@@ -1664,10 +1667,14 @@ char *f_name(struct file_struct *f)
 }
 
 
+/* Function now checks if file matches backup or delete suffix patterns */
 static int is_backup_file(char *fn)
 {
 	int k = strlen(fn) - backup_suffix_len;
-	return k > 0 && strcmp(fn+k, backup_suffix) == 0;
+	if (k > 0 && strcmp(fn+k, backup_suffix) == 0)
+		return 1;
+	k += backup_suffix_len - backup_suffix_rm_len;
+	return k > 0 && strcmp(fn+k, backup_suffix_rm) == 0;
 }
 
 
@@ -1755,11 +1762,12 @@ void delete_missing(struct file_list *fu
 		if ((j = flist_find(full_list, dir_list->files[i])) < 0
 		    || (S_ISDIR(mode) && !S_ISDIR(full_list->files[j]->mode))) {
 			char *f = f_name(dir_list->files[i]);
-			if (make_backups && (backup_dir || !is_backup_file(f))
+			int backup_file = is_backup_file(f);
+			if (make_backups && (backup_dir_rm || !backup_file)
 			  && !S_ISDIR(mode)) {
-				make_backup(f);
+				safe_delete(f);
 				if (verbose) {
-					rprintf(FINFO, "deleting %s\n",
+					rprintf(FINFO, "safe-deleting %s\n",
 						safe_fname(f));
 				}
 			} else if (S_ISDIR(mode))
--- orig/options.c	2005-02-11 18:21:45
+++ options.c	2005-01-28 19:17:35
@@ -118,10 +118,14 @@ int no_detach = 0;
 int write_batch = 0;
 int read_batch = 0;
 int backup_dir_len = 0;
+int backup_dir_rm_len = 0;	
 int backup_suffix_len;
+int backup_suffix_rm_len;
 unsigned int backup_dir_remainder;
+unsigned int backup_dir_rm_remainder;
 
 char *backup_suffix = NULL;
+char *backup_suffix_rm = NULL;
 char *tmpdir = NULL;
 char *partial_dir = NULL;
 char *basis_dir[MAX_BASIS_DIRS+1];
@@ -131,7 +135,9 @@ char *log_format = NULL;
 char *password_file = NULL;
 char *rsync_path = RSYNC_PATH;
 char *backup_dir = NULL;
+char *backup_dir_rm = NULL;
 char backup_dir_buf[MAXPATHLEN];
+char backup_dir_rm_buf[MAXPATHLEN];
 int rsync_port = 0;
 int compare_dest = 0;
 int copy_dest = 0;
@@ -258,6 +264,8 @@ void usage(enum logcode F)
   rprintf(F," -b, --backup                make backups (see --suffix & --backup-dir)\n");
   rprintf(F,"     --backup-dir=DIR        make backups into hierarchy based in DIR\n");
   rprintf(F,"     --suffix=SUFFIX         set backup suffix (default %s w/o --backup-dir)\n",BACKUP_SUFFIX);
+  rprintf(F,"     --backup-dir-rm         make backups of removed files into current dir\n");
+  rprintf(F,"     --backup-suffix-rm=SUF  set removed-files suffix (defaults to --suffix)\n");
   rprintf(F," -u, --update                skip files that are newer on the receiver\n");
   rprintf(F,"     --inplace               update destination files in-place (SEE MAN PAGE)\n");
   rprintf(F," -d, --dirs                  transfer directories without recursing\n");
@@ -350,6 +358,7 @@ static struct poptOption long_options[] 
   /* longName, shortName, argInfo, argPtr, value, descrip, argDesc */
   {"version",          0,  POPT_ARG_NONE,   0, OPT_VERSION, 0, 0},
   {"suffix",           0,  POPT_ARG_STRING, &backup_suffix, 0, 0, 0 },
+  {"backup-suffix-rm", 0,  POPT_ARG_STRING, &backup_suffix_rm, 0, 0, 0 },
   {"rsync-path",       0,  POPT_ARG_STRING, &rsync_path, 0, 0, 0 },
   {"password-file",    0,  POPT_ARG_STRING, &password_file, 0, 0, 0 },
   {"ignore-times",    'I', POPT_ARG_NONE,   &ignore_times, 0, 0, 0 },
@@ -427,6 +436,7 @@ static struct poptOption long_options[] 
   {"log-format",       0,  POPT_ARG_STRING, &log_format, 0, 0, 0 },
   {"bwlimit",          0,  POPT_ARG_INT,    &bwlimit, 0, 0, 0 },
   {"backup-dir",       0,  POPT_ARG_STRING, &backup_dir, 0, 0, 0 },
+  {"backup-dir-rm",    0,  POPT_ARG_STRING, &backup_dir_rm, 0, 0, 0 },
   {"hard-links",      'H', POPT_ARG_NONE,   &preserve_hard_links, 0, 0, 0 },
   {"read-batch",       0,  POPT_ARG_STRING, &batch_name, OPT_READ_BATCH, 0, 0 },
   {"write-batch",      0,  POPT_ARG_STRING, &batch_name, OPT_WRITE_BATCH, 0, 0 },
@@ -968,6 +978,8 @@ int parse_arguments(int *argc, const cha
 			partial_dir = sanitize_path(NULL, partial_dir, NULL, 0);
 		if (backup_dir)
 			backup_dir = sanitize_path(NULL, backup_dir, NULL, 0);
+		if (backup_dir_rm)							
+			backup_dir_rm = sanitize_path(NULL, backup_dir_rm, NULL, 0);
 		if (files_from)
 			files_from = sanitize_path(NULL, files_from, NULL, 0);
 	}
@@ -1000,6 +1012,12 @@ int parse_arguments(int *argc, const cha
 			if (check_filter(elp, backup_dir, 1) < 0)
 				goto options_rejected;
 		}
+		/* Clean backup_dir_rm same as for backup_dir */
+		if (backup_dir_rm) {
+			clean_fname(backup_dir_rm, 1);
+			if (check_exclude(elp, backup_dir_rm, 1) < 0)
+				goto options_rejected;
+		}
 	}
 	if (server_filter_list.head && files_from) {
 		if (!*files_from)
@@ -1022,6 +1040,16 @@ int parse_arguments(int *argc, const cha
 			backup_suffix);
 		return 0;
 	}
+	/* if suffix_rm not supplied, default to backup_suffix */
+	if (!backup_suffix_rm)
+		backup_suffix_rm = backup_dir_rm ? "" : backup_suffix;
+	backup_suffix_rm_len = strlen(backup_suffix_rm);
+	if (strchr(backup_suffix_rm, '/') != NULL) {
+		snprintf(err_buf, sizeof err_buf,
+			"--backup-suffix-rm cannot contain slashes: %s\n",
+			backup_suffix_rm);	
+		return 0;
+	}
 	if (backup_dir) {
 		backup_dir_len = strlcpy(backup_dir_buf, backup_dir, sizeof backup_dir_buf);
 		backup_dir_remainder = sizeof backup_dir_buf - backup_dir_len;
@@ -1043,6 +1071,31 @@ int parse_arguments(int *argc, const cha
 			"--suffix cannot be a null string without --backup-dir\n");
 		return 0;
 	}
+	/* If backup_dir_rm not supplied default to backup_dir if it has been supplied */
+	if (backup_dir && !backup_dir_rm) {
+		backup_dir_rm = backup_dir;
+		backup_dir_rm_len = backup_dir_len;
+		backup_dir_rm_remainder = backup_dir_remainder;
+		strlcpy(backup_dir_rm_buf, backup_dir_buf, sizeof backup_dir_buf);
+	} else if (backup_dir_rm) {
+		backup_dir_rm_len = strlcpy(backup_dir_rm_buf, backup_dir_rm, sizeof backup_dir_rm_buf);
+		backup_dir_rm_remainder = sizeof backup_dir_rm_buf - backup_dir_rm_len;
+		if (backup_dir_rm_remainder < 32) {
+			snprintf(err_buf, sizeof err_buf,
+				"the --backup-dir-rm path is WAY too long.\n");
+			return 0;
+		}
+		if (backup_dir_rm_buf[backup_dir_rm_len - 1] != '/') {
+			backup_dir_rm_buf[backup_dir_rm_len++] = '/';
+			backup_dir_rm_buf[backup_dir_rm_len] = '\0';
+		}
+		if (verbose > 1 && !am_sender)
+			rprintf(FINFO, "backup_dir_rm is %s\n", backup_dir_rm_buf);
+	} else if (!backup_suffix_rm_len && (!am_server || !am_sender)) {
+		snprintf(err_buf, sizeof err_buf,
+			"--backup-suffix-rm cannot be a null string without --backup-dir-rm\n");
+		return 0;
+	}
 
 	if (do_progress && !verbose) {
 		if (refused_verbose) {
@@ -1279,6 +1332,10 @@ void server_options(char **args,int *arg
 		args[ac++] = "--backup-dir";
 		args[ac++] = backup_dir;
 	}
+	if (backup_dir_rm) {
+		args[ac++] = "--backup-dir-rm";
+		args[ac++] = backup_dir_rm;
+	}
 
 	/* Only send --suffix if it specifies a non-default value. */
 	if (strcmp(backup_suffix, backup_dir ? "" : BACKUP_SUFFIX) != 0) {
@@ -1287,7 +1344,13 @@ void server_options(char **args,int *arg
 			goto oom;
 		args[ac++] = arg;
 	}
-
+	/* Only send --backup-suffix-rm if it specifies a non-default value. */
+	if (strcmp(backup_suffix_rm, backup_dir_rm ? "" : BACKUP_SUFFIX) != 0) {
+		/* We use the following syntax to avoid weirdness with '~'. */
+		if (asprintf(&arg, "--backup-suffix-rm=%s", backup_suffix_rm) < 0)
+			goto oom;
+		args[ac++] = arg;
+	}
 	if (am_sender) {
 		if (delete_excluded)
 			args[ac++] = "--delete-excluded";
