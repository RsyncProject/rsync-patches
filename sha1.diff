This patch adds sha1 to the checksum code when the openssl library is available.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/fix-checksums.diff
    patch -p1 <patches/sha1.diff
    ./configure                               (optional if already run)
    make

based-on: patch/master/fix-checksums
diff --git a/checksum.c b/checksum.c
--- a/checksum.c
+++ b/checksum.c
@@ -51,6 +51,9 @@ struct name_num_obj valid_checksums = {
 #ifdef SUPPORT_XXHASH
 		{ CSUM_XXH64, "xxh64", NULL },
 		{ CSUM_XXH64, "xxhash", NULL },
+#endif
+#ifdef USE_OPENSSL
+		{ CSUM_SHA1, "sha1", NULL },
 #endif
 		{ CSUM_MD5, "md5", NULL },
 		{ CSUM_MD4, "md4", NULL },
@@ -143,6 +146,8 @@ int csum_len_for_type(int cst, BOOL flist_csum)
 		return MD4_DIGEST_LEN;
 	  case CSUM_MD5:
 		return MD5_DIGEST_LEN;
+	  case CSUM_SHA1:
+		return SHA_DIGEST_LENGTH;
 	  case CSUM_XXH64:
 	  case CSUM_XXH3_64:
 		return 64/8;
@@ -168,6 +173,7 @@ int canonical_checksum(int csum_type)
 		break;
 	  case CSUM_MD4:
 	  case CSUM_MD5:
+	  case CSUM_SHA1:
 		return -1;
 	  case CSUM_XXH64:
 	  case CSUM_XXH3_64:
@@ -220,6 +226,18 @@ void get_checksum2(char *buf, int32 len, char *sum)
 		SIVAL64(sum, 8, digest.high64);
 		break;
 	  }
+#endif
+#ifdef USE_OPENSSL
+	  case CSUM_SHA1: {
+		SHA_CTX sha;
+		uchar seedbuf[4];
+		SHA1_Init(&sha);
+		SIVALu(seedbuf, 0, checksum_seed);
+		SHA1_Update(&sha, seedbuf, 4);
+		SHA1_Update(&sha, (uchar *)buf, len);
+		SHA1_Final((uchar *)sum, &sha);
+		break;
+	  }
 #endif
 	  case CSUM_MD5: {
 		md5_context m5;
@@ -372,6 +390,23 @@ void file_checksum(const char *fname, const STRUCT_STAT *st_p, char *sum)
 		SIVAL64(sum, 8, digest.high64);
 		break;
 	  }
+#endif
+#ifdef USE_OPENSSL
+	  case CSUM_SHA1: {
+		SHA_CTX sha;
+
+		SHA1_Init(&sha);
+
+		for (i = 0; i + CHUNK_SIZE <= len; i += CHUNK_SIZE)
+			SHA1_Update(&sha, (uchar *)map_ptr(buf, i, CHUNK_SIZE), CHUNK_SIZE);
+
+		remainder = (int32)(len - i);
+		if (remainder > 0)
+			SHA1_Update(&sha, (uchar *)map_ptr(buf, i, remainder), remainder);
+
+		SHA1_Final((uchar *)sum, &sha);
+		break;
+	  }
 #endif
 	  case CSUM_MD5: {
 		md5_context m5;
@@ -442,6 +477,7 @@ static union {
 	md_context md;
 #ifdef USE_OPENSSL
 	MD4_CTX m4;
+	SHA_CTX sha;
 #endif
 	md5_context m5;
 } ctx;
@@ -480,6 +516,11 @@ void sum_init(int csum_type, int seed)
 			out_of_memory("sum_init");
 		XXH3_128bits_reset(xxh3_state);
 		break;
+#endif
+#ifdef USE_OPENSSL
+	  case CSUM_SHA1:
+		SHA1_Init(&ctx.sha);
+		break;
 #endif
 	  case CSUM_MD5:
 		md5_begin(&ctx.m5);
@@ -530,6 +571,11 @@ void sum_update(const char *p, int32 len)
 	  case CSUM_XXH3_128:
 		XXH3_128bits_update(xxh3_state, p, len);
 		break;
+#endif
+#ifdef USE_OPENSSL
+	  case CSUM_SHA1:
+		SHA1_Update(&ctx.sha, (uchar *)p, len);
+		break;
 #endif
 	  case CSUM_MD5:
 		md5_update(&ctx.m5, (uchar *)p, len);
@@ -595,6 +641,11 @@ int sum_end(char *sum)
 		SIVAL64(sum, 8, digest.high64);
 		break;
 	  }
+#endif
+#ifdef USE_OPENSSL
+	  case CSUM_SHA1:
+		SHA1_Final((uchar *)sum, &ctx.sha);
+		break;
 #endif
 	  case CSUM_MD5:
 		md5_result(&ctx.m5, (uchar *)sum);
diff --git a/lib/md-defines.h b/lib/md-defines.h
--- a/lib/md-defines.h
+++ b/lib/md-defines.h
@@ -2,7 +2,11 @@
 
 #define MD4_DIGEST_LEN 16
 #define MD5_DIGEST_LEN 16
+#ifdef USE_OPENSSL
+#define MAX_DIGEST_LEN SHA_DIGEST_LENGTH
+#else
 #define MAX_DIGEST_LEN MD5_DIGEST_LEN
+#endif
 
 #define CSUM_CHUNK 64
 
@@ -15,3 +19,4 @@
 #define CSUM_XXH64 6
 #define CSUM_XXH3_64 7
 #define CSUM_XXH3_128 8
+#define CSUM_SHA1 9
diff --git a/lib/mdigest.h b/lib/mdigest.h
--- a/lib/mdigest.h
+++ b/lib/mdigest.h
@@ -3,6 +3,7 @@
 #ifdef USE_OPENSSL
 #include "openssl/md4.h"
 #include "openssl/md5.h"
+#include <openssl/sha.h>
 #endif
 #include "md-defines.h"
 
