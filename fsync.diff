This patch from Sami Farin lets you specify --fsync if you want fsync()
to be called on every file we write.

--- options.c	6 Jun 2004 19:02:40 -0000	1.155
+++ options.c	6 Jun 2004 21:20:05 -0000
@@ -38,6 +38,7 @@ int make_backups = 0;
  **/
 int whole_file = -1;
 
+int do_fsync = 0;
 int archive_mode = 0;
 int keep_dirlinks = 0;
 int copy_links = 0;
@@ -233,6 +234,7 @@ void usage(enum logcode F)
   rprintf(F," -b, --backup                make backups (see --suffix & --backup-dir)\n");
   rprintf(F,"     --backup-dir            make backups into this directory\n");
   rprintf(F,"     --suffix=SUFFIX         backup suffix (default %s w/o --backup-dir)\n",BACKUP_SUFFIX);
+  rprintf(F,"     --fsync                 fsync every written file\n");
   rprintf(F," -u, --update                update only (don't overwrite newer files)\n");
   rprintf(F," -K, --keep-dirlinks         treat symlinked dir on receiver as dir\n");
   rprintf(F," -l, --links                 copy symlinks as symlinks\n");
@@ -337,6 +339,7 @@ static struct poptOption long_options[] 
   {"safe-links",       0,  POPT_ARG_NONE,   &safe_symlinks, 0, 0, 0 },
   {"help",            'h', POPT_ARG_NONE,   0,              'h', 0, 0 },
   {"backup",          'b', POPT_ARG_NONE,   &make_backups, 0, 0, 0 },
+  {"fsync",            0,  POPT_ARG_NONE,   &do_fsync, 0, 0, 0 },
   {"dry-run",         'n', POPT_ARG_NONE,   &dry_run, 0, 0, 0 },
   {"sparse",          'S', POPT_ARG_NONE,   &sparse_files, 0, 0, 0 },
   {"cvs-exclude",     'C', POPT_ARG_NONE,   &cvs_exclude, 0, 0, 0 },
@@ -973,6 +976,9 @@ void server_options(char **args,int *arg
 		args[ac++] = tmpdir;
 	}
 
+	if (do_fsync && am_sender)
+		args[ac++] = "--fsync";
+
 	if (compare_dest && am_sender) {
 		/* the server only needs this option if it is not the sender,
 		 *   and it may be an older version that doesn't know this
--- receiver.c	21 May 2004 08:27:04 -0000	1.79
+++ receiver.c	6 Jun 2004 21:20:05 -0000
@@ -47,6 +47,7 @@ extern int ignore_errors;
 extern int orig_umask;
 extern int keep_partial;
 extern int checksum_seed;
+extern int do_fsync;
 
 static void delete_one(char *fn, int is_dir)
 {
@@ -271,6 +272,12 @@ static int receive_data(int f_in,struct 
 		exit_cleanup(RERR_FILEIO);
 	}
 
+	if (do_fsync && (fd != -1) && (fsync(fd) != 0)) {
+		rsyserr(FERROR, errno, "fsync failed on %s",
+			full_fname(fname));
+		exit_cleanup(RERR_FILEIO);
+	}
+
 	sum_end(file_sum1);
 
 	read_buf(f_in,file_sum2,MD4_SUM_LENGTH);
--- util.c	5 Jun 2004 20:26:56 -0000	1.148
+++ util.c	6 Jun 2004 21:20:06 -0000
@@ -32,6 +32,7 @@ extern int dry_run;
 extern int module_id;
 extern int modify_window;
 extern struct exclude_list_struct server_exclude_list;
+extern int do_fsync;
 
 int sanitize_paths = 0;
 
@@ -297,6 +298,12 @@ int copy_file(char *source, char *dest, 
 		return -1;
 	}
 
+	if (do_fsync && fsync(ofd) < 0) {
+		rsyserr(FERROR, errno, "fsync failed on %s",
+			full_fname(dest));
+		return -1;
+	}
+
 	return 0;
 }
 
