This patch from Sami Farin lets you specify --fsync if you want fsync()
to be called on every file we write.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/fsync.diff
    ./configure                         (optional if already run)
    make

--- old/options.c
+++ new/options.c
@@ -44,6 +44,7 @@ int append_mode = 0;
 int keep_dirlinks = 0;
 int copy_dirlinks = 0;
 int copy_links = 0;
+int do_fsync = 0;
 int preserve_links = 0;
 int preserve_hard_links = 0;
 int preserve_acls = 0;
@@ -367,6 +368,7 @@ void usage(enum logcode F)
   rprintf(F,"     --partial-dir=DIR       put a partially transferred file into DIR\n");
   rprintf(F,"     --delay-updates         put all updated files into place at transfer's end\n");
   rprintf(F," -m, --prune-empty-dirs      prune empty directory chains from the file-list\n");
+  rprintf(F,"     --fsync                 fsync every written file\n");
   rprintf(F,"     --numeric-ids           don't map uid/gid values by user/group name\n");
   rprintf(F,"     --timeout=TIME          set I/O timeout in seconds\n");
   rprintf(F," -I, --ignore-times          don't skip files that match in size and mod-time\n");
@@ -580,6 +582,7 @@ static struct poptOption long_options[] 
   {"files-from",       0,  POPT_ARG_STRING, &files_from, 0, 0, 0 },
   {"from0",           '0', POPT_ARG_VAL,    &eol_nulls, 1, 0, 0},
   {"no-from0",         0,  POPT_ARG_VAL,    &eol_nulls, 0, 0, 0},
+  {"fsync",            0,  POPT_ARG_NONE,   &do_fsync, 0, 0, 0 },
   {"numeric-ids",      0,  POPT_ARG_VAL,    &numeric_ids, 1, 0, 0 },
   {"no-numeric-ids",   0,  POPT_ARG_VAL,    &numeric_ids, 0, 0, 0 },
   {"timeout",          0,  POPT_ARG_INT,    &io_timeout, 0, 0, 0 },
@@ -1885,6 +1888,9 @@ void server_options(char **args,int *arg
 			args[ac++] = tmpdir;
 		}
 
+		if (do_fsync)
+			args[ac++] = "--fsync";
+
 		if (basis_dir[0]) {
 			/* the server only needs this option if it is not the sender,
 			 *   and it may be an older version that doesn't know this
--- old/receiver.c
+++ new/receiver.c
@@ -39,6 +39,7 @@ extern int relative_paths;
 extern int preserve_hard_links;
 extern int preserve_perms;
 extern int preserve_xattrs;
+extern int do_fsync;
 extern int basis_dir_cnt;
 extern int make_backups;
 extern int cleanup_got_literal;
@@ -259,6 +260,12 @@ static int receive_data(int f_in, char *
 		exit_cleanup(RERR_FILEIO);
 	}
 
+	if (do_fsync && fd != -1 && fsync(fd) != 0) {
+		rsyserr(FERROR, errno, "fsync failed on %s",
+			full_fname(fname));
+		exit_cleanup(RERR_FILEIO);
+	}
+
 	sum_len = sum_end(file_sum1);
 
 	if (mapbuf)
--- old/t_stub.c
+++ new/t_stub.c
@@ -21,6 +21,7 @@
 
 #include "rsync.h"
 
+int do_fsync = 0;
 int modify_window = 0;
 int module_id = -1;
 int relative_paths = 0;
--- old/util.c
+++ new/util.c
@@ -25,6 +25,7 @@
 extern int verbose;
 extern int dry_run;
 extern int module_id;
+extern int do_fsync;
 extern int modify_window;
 extern int relative_paths;
 extern int human_readable;
@@ -309,6 +310,13 @@ int copy_file(const char *source, const 
 			full_fname(source));
 	}
 
+	if (do_fsync && fsync(ofd) < 0) {
+		rsyserr(FERROR, errno, "fsync failed on %s",
+			full_fname(dest));
+		close(ofd);
+		return -1;
+	}
+
 	if (close(ofd) < 0) {
 		rsyserr(FERROR, errno, "close failed on %s",
 			full_fname(dest));
