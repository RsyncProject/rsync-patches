This patch from Sami Farin lets you specify --fsync if you want fsync()
to be called on every file we write.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/fsync.diff
    ./configure                         (optional if already run)
    make

--- old/options.c
+++ new/options.c
@@ -45,6 +45,7 @@ int append_mode = 0;
 int keep_dirlinks = 0;
 int copy_dirlinks = 0;
 int copy_links = 0;
+int do_fsync = 0;
 int preserve_links = 0;
 int preserve_hard_links = 0;
 int preserve_perms = 0;
@@ -339,6 +340,7 @@ void usage(enum logcode F)
   rprintf(F,"     --partial-dir=DIR       put a partially transferred file into DIR\n");
   rprintf(F,"     --delay-updates         put all updated files into place at transfer's end\n");
   rprintf(F," -m, --prune-empty-dirs      prune empty directory chains from the file-list\n");
+  rprintf(F,"     --fsync                 fsync every written file\n");
   rprintf(F,"     --numeric-ids           don't map uid/gid values by user/group name\n");
   rprintf(F,"     --timeout=TIME          set I/O timeout in seconds\n");
   rprintf(F," -I, --ignore-times          don't skip files that match in size and mod-time\n");
@@ -525,6 +527,7 @@ static struct poptOption long_options[] 
   {"only-write-batch", 0,  POPT_ARG_STRING, &batch_name, OPT_ONLY_WRITE_BATCH, 0, 0 },
   {"files-from",       0,  POPT_ARG_STRING, &files_from, 0, 0, 0 },
   {"from0",           '0', POPT_ARG_NONE,   &eol_nulls, 0, 0, 0},
+  {"fsync",            0,  POPT_ARG_NONE,   &do_fsync, 0, 0, 0 },
   {"numeric-ids",      0,  POPT_ARG_NONE,   &numeric_ids, 0, 0, 0 },
   {"timeout",          0,  POPT_ARG_INT,    &io_timeout, 0, 0, 0 },
   {"rsh",             'e', POPT_ARG_STRING, &shell_cmd, 0, 0, 0 },
@@ -1727,6 +1730,9 @@ void server_options(char **args,int *arg
 		args[ac++] = tmpdir;
 	}
 
+	if (do_fsync && am_sender)
+		args[ac++] = "--fsync";
+
 	if (basis_dir[0] && am_sender) {
 		/* the server only needs this option if it is not the sender,
 		 *   and it may be an older version that doesn't know this
--- old/receiver.c
+++ new/receiver.c
@@ -37,6 +37,7 @@ extern int protocol_version;
 extern int relative_paths;
 extern int preserve_hard_links;
 extern int preserve_perms;
+extern int do_fsync;
 extern int basis_dir_cnt;
 extern int make_backups;
 extern int cleanup_got_literal;
@@ -258,6 +259,12 @@ static int receive_data(int f_in, char *
 		exit_cleanup(RERR_FILEIO);
 	}
 
+	if (do_fsync && fd != -1 && fsync(fd) != 0) {
+		rsyserr(FERROR, errno, "fsync failed on %s",
+			full_fname(fname));
+		exit_cleanup(RERR_FILEIO);
+	}
+
 	sum_end(file_sum1);
 
 	if (mapbuf)
--- old/t_stub.c
+++ new/t_stub.c
@@ -22,6 +22,7 @@
 
 #include "rsync.h"
 
+int do_fsync = 0;
 int modify_window = 0;
 int module_id = -1;
 int relative_paths = 0;
--- old/util.c
+++ new/util.c
@@ -26,6 +26,7 @@
 extern int verbose;
 extern int dry_run;
 extern int module_id;
+extern int do_fsync;
 extern int modify_window;
 extern int relative_paths;
 extern int human_readable;
@@ -314,6 +315,12 @@ int copy_file(const char *source, const 
 		return -1;
 	}
 
+	if (do_fsync && fsync(ofd) < 0) {
+		rsyserr(FERROR, errno, "fsync failed on %s",
+			full_fname(dest));
+		return -1;
+	}
+
 	return 0;
 }
 
