This adds the --ignore-case option, which makes rsync compare filenames
in a case-insensitive manner.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/ignore-case.diff
    ./configure                            (optional if already run)
    make

--- old/flist.c
+++ new/flist.c
@@ -32,6 +32,7 @@ extern int am_sender;
 extern int do_progress;
 extern int always_checksum;
 extern int module_id;
+extern int ignore_case;
 extern int ignore_errors;
 extern int numeric_ids;
 extern int recurse;
@@ -1783,7 +1784,7 @@ int f_name_cmp(struct file_struct *f1, s
 	if (type1 != type2)
 		return type1 == t_PATH ? 1 : -1;
 
-	do {
+	while (1) {
 		if (!*c1) {
 			switch (state1) {
 			case s_DIR:
@@ -1846,7 +1847,16 @@ int f_name_cmp(struct file_struct *f1, s
 			if (type1 != type2)
 				return type1 == t_PATH ? 1 : -1;
 		}
-	} while ((dif = (int)*c1++ - (int)*c2++) == 0);
+		if (ignore_case) {
+			uchar ch1, ch2;
+			ch1 = islower(*c1) ? toupper(*c1) : *c1;
+			ch2 = islower(*c2) ? toupper(*c2) : *c2;
+			c1++, c2++;
+			if ((dif = (int)ch1 - (int)ch2) != 0)
+				break;
+		} else if ((dif = (int)*c1++ - (int)*c2++) != 0)
+			break;
+	}
 
 	return dif;
 }
--- old/lib/wildmatch.c
+++ new/lib/wildmatch.c
@@ -53,6 +53,8 @@
 #define ISUPPER(c) (ISASCII(c) && isupper(c))
 #define ISXDIGIT(c) (ISASCII(c) && isxdigit(c))
 
+extern int ignore_case;
+
 #ifdef WILD_TEST_ITERATIONS
 int wildmatch_iteration_count;
 #endif
@@ -72,6 +74,8 @@ static int dowild(const uchar *p, const 
     for ( ; (p_ch = *p) != '\0'; text++, p++) {
 	int matched, special;
 	uchar t_ch, prev_ch;
+	if (ignore_case && ISUPPER(p_ch))
+	    p_ch = tolower(p_ch);
 	while ((t_ch = *text) == '\0') {
 	    if (*a == NULL) {
 		if (p_ch != '*')
@@ -288,10 +292,14 @@ static const uchar *trailing_N_elements(
 int wildmatch(const char *pattern, const char *text)
 {
     static const uchar *nomore[1]; /* A NULL pointer. */
+    int ret;
 #ifdef WILD_TEST_ITERATIONS
     wildmatch_iteration_count = 0;
 #endif
-    return dowild((const uchar*)pattern, (const uchar*)text, nomore) == TRUE;
+    force_lower_case = ignore_case;
+    ret = dowild((const uchar*)pattern, (const uchar*)text, nomore) == TRUE;
+    force_lower_case = 0;
+    return ret;
 }
 
 /* Match the "pattern" against the forced-to-lower-case "text" string. */
--- old/options.c
+++ new/options.c
@@ -111,6 +111,7 @@ OFF_T max_size = 0;
 OFF_T min_size = 0;
 int ignore_errors = 0;
 int modify_window = 0;
+int ignore_case = 0;
 int blocking_io = -1;
 int checksum_seed = 0;
 int inplace = 0;
@@ -361,6 +362,7 @@ void usage(enum logcode F)
   rprintf(F,"     --include-from=FILE     read include patterns from FILE\n");
   rprintf(F,"     --files-from=FILE       read list of source-file names from FILE\n");
   rprintf(F," -0, --from0                 all *-from/filter files are delimited by 0s\n");
+  rprintf(F,"     --ignore-case           ignore case when comparing filenames\n");
   rprintf(F,"     --address=ADDRESS       bind address for outgoing socket to daemon\n");
   rprintf(F,"     --port=PORT             specify double-colon alternate port number\n");
   rprintf(F,"     --sockopts=OPTIONS      specify custom TCP options\n");
@@ -525,6 +527,7 @@ static struct poptOption long_options[] 
   {"only-write-batch", 0,  POPT_ARG_STRING, &batch_name, OPT_ONLY_WRITE_BATCH, 0, 0 },
   {"files-from",       0,  POPT_ARG_STRING, &files_from, 0, 0, 0 },
   {"from0",           '0', POPT_ARG_NONE,   &eol_nulls, 0, 0, 0},
+  {"ignore-case",      0,  POPT_ARG_NONE,   &ignore_case, 0, 0, 0 },
   {"numeric-ids",      0,  POPT_ARG_NONE,   &numeric_ids, 0, 0, 0 },
   {"timeout",          0,  POPT_ARG_INT,    &io_timeout, 0, 0, 0 },
   {"rsh",             'e', POPT_ARG_STRING, &shell_cmd, 0, 0, 0 },
@@ -1688,6 +1691,9 @@ void server_options(char **args,int *arg
 		args[ac++] = arg;
 	}
 
+	if (ignore_case)
+		args[ac++] = "--ignore-case";
+
 	if (partial_dir && am_sender) {
 		if (partial_dir != tmp_partialdir) {
 			args[ac++] = "--partial-dir";
--- old/wildtest.c
+++ new/wildtest.c
@@ -32,6 +32,7 @@ int fnmatch_errors = 0;
 #endif
 
 int wildmatch_errors = 0;
+int ignore_case = 0;
 
 typedef char bool;
 
